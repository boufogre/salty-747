{"code":"import { __awaiter } from \"tslib\";\r\n/* eslint-disable @typescript-eslint/no-empty-function */\r\nimport { FlightPlanSegment, SegmentType } from './FlightPlanSegment';\r\nimport { FlightPlanAsoboSync } from './FlightPlanAsoboSync';\r\nimport { ManagedFlightPlan } from './ManagedFlightPlan';\r\n/**\r\n * A system for managing flight plan data used by various instruments.\r\n */\r\nexport class FlightPlanManager {\r\n    /**\r\n     * Constructs an instance of the FlightPlanManager with the provided\r\n     * parent instrument attached.\r\n     * @param parentInstrument The parent instrument attached to this FlightPlanManager.\r\n     */\r\n    constructor(_parentInstrument) {\r\n        this._parentInstrument = _parentInstrument;\r\n        this._isRegistered = false;\r\n        this._isMaster = false;\r\n        this._isSyncPaused = false;\r\n        this._currentFlightPlanVersion = 0;\r\n        this.__currentFlightPlanIndex = 0;\r\n        /**\r\n         * The current stored flight plan data.\r\n         * @type ManagedFlightPlan[]\r\n         */\r\n        this._flightPlans = [];\r\n        this._loadFlightPlans();\r\n        if (_parentInstrument.instrumentIdentifier == \"B747_8_FMC\") {\r\n            this._isMaster = true;\r\n            _parentInstrument.addEventListener(\"FlightStart\", function () {\r\n                return __awaiter(this, void 0, void 0, function* () {\r\n                    const plan = new ManagedFlightPlan();\r\n                    plan.setParentInstrument(_parentInstrument);\r\n                    this._flightPlans = [];\r\n                    this._flightPlans.push(plan);\r\n                    if (WTDataStore.get('WT_CJ4_FPSYNC', 0) !== 0) {\r\n                        this.pauseSync();\r\n                        yield FlightPlanAsoboSync.LoadFromGame(this);\r\n                    }\r\n                    this.resumeSync();\r\n                    // ctd magic sauce?\r\n                    Coherent.call(\"SET_ACTIVE_WAYPOINT_INDEX\", 0);\r\n                    Coherent.call(\"RECOMPUTE_ACTIVE_WAYPOINT_INDEX\");\r\n                });\r\n            }.bind(this));\r\n        }\r\n        FlightPlanManager.DEBUG_INSTANCE = this;\r\n    }\r\n    get _currentFlightPlanIndex() {\r\n        return this.__currentFlightPlanIndex;\r\n    }\r\n    set _currentFlightPlanIndex(value) {\r\n        this.__currentFlightPlanIndex = value;\r\n    }\r\n    /**\r\n     * Gets the current stored version of the flight plan.\r\n     */\r\n    get CurrentFlightPlanVersion() {\r\n        return this._currentFlightPlanVersion;\r\n    }\r\n    update(_deltaTime) {\r\n    }\r\n    onCurrentGameFlightLoaded(_callback) {\r\n        _callback();\r\n    }\r\n    registerListener() {\r\n    }\r\n    addHardCodedConstraints(wp) {\r\n    }\r\n    /**\r\n     * Loads sim flight plan data into WayPoint objects for consumption.\r\n     * @param data The flight plan data to load.\r\n     * @param currentWaypoints The waypoints array to modify with the data loaded.\r\n     * @param callback A callback to call when the data has completed loading.\r\n     */\r\n    _loadWaypoints(data, currentWaypoints, callback) {\r\n    }\r\n    /**\r\n     * Updates the current active waypoint index from the sim.\r\n     */\r\n    updateWaypointIndex() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            //const waypointIndex = await Coherent.call(\"GET_ACTIVE_WAYPOINT_INDEX\");\r\n            //this._activeWaypointIndex = waypointIndex;\r\n        });\r\n    }\r\n    /**\r\n     * Scans for updates to the synchronized flight plan and loads them into the flight plan\r\n     * manager if the flight plan is out of date.\r\n     * @param {() => void} callback A callback to call when the update has completed.\r\n     * @param {Boolean} log Whether or not to log the loaded flight plan value.\r\n     */\r\n    updateFlightPlan(callback = () => { }, log = false) {\r\n        const flightPlanVersion = SimVar.GetSimVarValue(\"L:WT.FlightPlan.Version\", \"number\");\r\n        if (flightPlanVersion !== this._currentFlightPlanVersion) {\r\n            this._loadFlightPlans();\r\n            this._currentFlightPlanVersion = flightPlanVersion;\r\n        }\r\n        callback();\r\n    }\r\n    /**\r\n     * Loads the flight plans from data storage.\r\n     */\r\n    _loadFlightPlans() {\r\n        this._getFlightPlan();\r\n        if (this._flightPlans.length === 0) {\r\n            const newFpln = new ManagedFlightPlan();\r\n            newFpln.setParentInstrument(this._parentInstrument);\r\n            this._flightPlans.push(new ManagedFlightPlan());\r\n        }\r\n        else {\r\n            this._flightPlans = this._flightPlans.map(fp => ManagedFlightPlan.fromObject(fp, this._parentInstrument));\r\n        }\r\n    }\r\n    updateCurrentApproach(callback = () => { }, log = false) {\r\n        callback();\r\n    }\r\n    get cruisingAltitude() {\r\n        return 0;\r\n    }\r\n    /**\r\n     * Gets the index of the currently active flight plan.\r\n     */\r\n    getCurrentFlightPlanIndex() {\r\n        return this._currentFlightPlanIndex;\r\n    }\r\n    /**\r\n     * Switches the active flight plan index to the supplied index.\r\n     * @param index The index to now use for the active flight plan.\r\n     * @param callback A callback to call when the operation has completed.\r\n     */\r\n    setCurrentFlightPlanIndex(index, callback = EmptyCallback.Boolean) {\r\n        if (index >= 0 && index < this._flightPlans.length) {\r\n            this._currentFlightPlanIndex = index;\r\n            callback(true);\r\n        }\r\n        else {\r\n            callback(false);\r\n        }\r\n    }\r\n    /**\r\n     * Creates a new flight plan.\r\n     * @param callback A callback to call when the operation has completed.\r\n     */\r\n    createNewFlightPlan(callback = EmptyCallback.Void) {\r\n        const newFlightPlan = new ManagedFlightPlan();\r\n        newFlightPlan.setParentInstrument(this._parentInstrument);\r\n        this._flightPlans.push(newFlightPlan);\r\n        this._updateFlightPlanVersion();\r\n        callback();\r\n    }\r\n    /**\r\n     * Copies the currently active flight plan into the specified flight plan index.\r\n     * @param index The index to copy the currently active flight plan into.\r\n     * @param callback A callback to call when the operation has completed.\r\n     */\r\n    copyCurrentFlightPlanInto(index, callback = EmptyCallback.Void) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const copiedFlightPlan = this._flightPlans[this._currentFlightPlanIndex].copy();\r\n            const activeWaypointIndex = copiedFlightPlan.activeWaypointIndex;\r\n            this._flightPlans[index] = copiedFlightPlan;\r\n            if (index === 0) {\r\n                //await GPS.setActiveWaypoint(activeWaypointIndex);\r\n            }\r\n            this._updateFlightPlanVersion();\r\n            callback();\r\n        });\r\n    }\r\n    /**\r\n     * Copies the flight plan at the specified index to the currently active flight plan index.\r\n     * @param index The index to copy into the currently active flight plan.\r\n     * @param callback A callback to call when the operation has completed.\r\n     */\r\n    copyFlightPlanIntoCurrent(index, callback = EmptyCallback.Void) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const copiedFlightPlan = this._flightPlans[index].copy();\r\n            const activeWaypointIndex = copiedFlightPlan.activeWaypointIndex;\r\n            this._flightPlans[this._currentFlightPlanIndex] = copiedFlightPlan;\r\n            if (this._currentFlightPlanIndex === 0) {\r\n                //await GPS.setActiveWaypoint(activeWaypointIndex);\r\n            }\r\n            this._updateFlightPlanVersion();\r\n            callback();\r\n        });\r\n    }\r\n    /**\r\n     * Clears the currently active flight plan.\r\n     * @param callback A callback to call when the operation has completed.\r\n     */\r\n    clearFlightPlan(callback = EmptyCallback.Void) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            yield this._flightPlans[this._currentFlightPlanIndex].clearPlan();\r\n            this._updateFlightPlanVersion();\r\n            callback();\r\n        });\r\n    }\r\n    /**\r\n     * Gets the origin of the currently active flight plan.\r\n     */\r\n    getOrigin() {\r\n        const currentFlightPlan = this._flightPlans[this._currentFlightPlanIndex];\r\n        return currentFlightPlan.originAirfield;\r\n    }\r\n    /**\r\n     * Sets the origin in the currently active flight plan.\r\n     * @param icao The ICAO designation of the origin airport.\r\n     * @param callback A callback to call when the operation has completed.\r\n     */\r\n    setOrigin(icao, callback = () => { }) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const currentFlightPlan = this._flightPlans[this._currentFlightPlanIndex];\r\n            const airport = yield this._parentInstrument.facilityLoader.getFacilityRaw(icao);\r\n            yield currentFlightPlan.clearPlan();\r\n            yield currentFlightPlan.addWaypoint(airport, 0);\r\n            this._updateFlightPlanVersion();\r\n            callback();\r\n        });\r\n    }\r\n    /**\r\n     * Gets the index of the active waypoint in the flight plan.\r\n     * @param forceSimVarCall Unused\r\n     * @param useCorrection Unused\r\n     */\r\n    getActiveWaypointIndex(forceSimVarCall = false, useCorrection = false) {\r\n        return this._flightPlans[this._currentFlightPlanIndex].activeWaypointIndex;\r\n    }\r\n    /**\r\n     * Sets the index of the active waypoint in the flight plan.\r\n     * @param index The index to make active in the flight plan.\r\n     * @param callback A callback to call when the operation has completed.\r\n     * @param fplnIndex The index of the flight plan\r\n     */\r\n    setActiveWaypointIndex(index, callback = EmptyCallback.Void, fplnIndex = this._currentFlightPlanIndex) {\r\n        const currentFlightPlan = this._flightPlans[fplnIndex];\r\n        if (index >= 0 && index < currentFlightPlan.length) {\r\n            currentFlightPlan.activeWaypointIndex = index;\r\n            if (currentFlightPlan.directTo.isActive && currentFlightPlan.directTo.waypointIsInFlightPlan\r\n                && currentFlightPlan.activeWaypointIndex > currentFlightPlan.directTo.planWaypointIndex) {\r\n                currentFlightPlan.directTo.isActive = false;\r\n            }\r\n        }\r\n        this._updateFlightPlanVersion();\r\n        callback();\r\n    }\r\n    /** Unknown */\r\n    recomputeActiveWaypointIndex(callback = EmptyCallback.Void) {\r\n        callback();\r\n    }\r\n    /**\r\n     * Gets the index of the waypoint prior to the currently active waypoint.\r\n     * @param forceSimVarCall Unused\r\n     */\r\n    getPreviousActiveWaypoint(forceSimVarCall = false) {\r\n        const currentFlightPlan = this._flightPlans[this._currentFlightPlanIndex];\r\n        const previousWaypointIndex = currentFlightPlan.activeWaypointIndex - 1;\r\n        return currentFlightPlan.getWaypoint(previousWaypointIndex);\r\n    }\r\n    /**\r\n     * Gets the ident of the active waypoint.\r\n     * @param forceSimVarCall Unused\r\n     */\r\n    getActiveWaypointIdent(forceSimVarCall = false) {\r\n        const currentFlightPlan = this._flightPlans[this._currentFlightPlanIndex];\r\n        if (currentFlightPlan.activeWaypoint) {\r\n            return currentFlightPlan.activeWaypoint.ident;\r\n        }\r\n        return \"\";\r\n    }\r\n    /**\r\n     * Gets the active waypoint index from fs9gps. Currently unimplemented.\r\n     * @param forceSimVarCall Unused\r\n     */\r\n    getGPSActiveWaypointIndex(forceSimVarCall = false) {\r\n        return this.getActiveWaypointIndex();\r\n    }\r\n    /**\r\n     * Gets the active waypoint.\r\n     * @param forceSimVarCall Unused\r\n     * @param useCorrection Unused\r\n     */\r\n    getActiveWaypoint(forceSimVarCall = false, useCorrection = false) {\r\n        return this._flightPlans[this._currentFlightPlanIndex].activeWaypoint;\r\n    }\r\n    /**\r\n     * Gets the next waypoint following the active waypoint.\r\n     * @param forceSimVarCall Unused\r\n     */\r\n    getNextActiveWaypoint(forceSimVarCall = false) {\r\n        const currentFlightPlan = this._flightPlans[this._currentFlightPlanIndex];\r\n        const nextWaypointIndex = currentFlightPlan.activeWaypointIndex + 1;\r\n        return currentFlightPlan.getWaypoint(nextWaypointIndex);\r\n    }\r\n    /**\r\n     * Gets the distance, in NM, to the active waypoint.\r\n     */\r\n    getDistanceToActiveWaypoint() {\r\n        const lat = SimVar.GetSimVarValue(\"PLANE LATITUDE\", \"degree latitude\");\r\n        const long = SimVar.GetSimVarValue(\"PLANE LONGITUDE\", \"degree longitude\");\r\n        const ll = new LatLongAlt(lat, long);\r\n        const waypoint = this.getActiveWaypoint();\r\n        if (waypoint && waypoint.infos) {\r\n            return Avionics.Utils.computeDistance(ll, waypoint.infos.coordinates);\r\n        }\r\n        return 0;\r\n    }\r\n    /**\r\n     * Gets the bearing, in degrees, to the active waypoint.\r\n     */\r\n    getBearingToActiveWaypoint() {\r\n        const lat = SimVar.GetSimVarValue(\"PLANE LATITUDE\", \"degree latitude\");\r\n        const long = SimVar.GetSimVarValue(\"PLANE LONGITUDE\", \"degree longitude\");\r\n        const ll = new LatLongAlt(lat, long);\r\n        const waypoint = this.getActiveWaypoint();\r\n        if (waypoint && waypoint.infos) {\r\n            return Avionics.Utils.computeGreatCircleHeading(ll, waypoint.infos.coordinates);\r\n        }\r\n        return 0;\r\n    }\r\n    /**\r\n     * Gets the estimated time enroute to the active waypoint.\r\n     */\r\n    getETEToActiveWaypoint() {\r\n        const lat = SimVar.GetSimVarValue(\"PLANE LATITUDE\", \"degree latitude\");\r\n        const long = SimVar.GetSimVarValue(\"PLANE LONGITUDE\", \"degree longitude\");\r\n        const ll = new LatLongAlt(lat, long);\r\n        const waypoint = this.getActiveWaypoint();\r\n        if (waypoint && waypoint.infos) {\r\n            const dist = Avionics.Utils.computeDistance(ll, waypoint.infos.coordinates);\r\n            let groundSpeed = SimVar.GetSimVarValue(\"GPS GROUND SPEED\", \"knots\");\r\n            if (groundSpeed < 50) {\r\n                groundSpeed = 50;\r\n            }\r\n            if (groundSpeed > 0.1) {\r\n                return dist / groundSpeed * 3600;\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n    /**\r\n     * Gets the destination airfield of the current flight plan, if any.\r\n     */\r\n    getDestination() {\r\n        const currentFlightPlan = this._flightPlans[this._currentFlightPlanIndex];\r\n        return currentFlightPlan.destinationAirfield;\r\n    }\r\n    /**\r\n     * Gets the currently selected departure information for the current flight plan.\r\n     */\r\n    getDeparture() {\r\n        const origin = this.getOrigin();\r\n        const currentFlightPlan = this._flightPlans[this._currentFlightPlanIndex];\r\n        if (origin) {\r\n            const originInfos = origin.infos;\r\n            if (originInfos.departures !== undefined && currentFlightPlan.procedureDetails.departureIndex !== -1) {\r\n                return originInfos.departures[currentFlightPlan.procedureDetails.departureIndex];\r\n            }\r\n        }\r\n        return undefined;\r\n    }\r\n    /**\r\n     * Gets the currently selected arrival information for the current flight plan.\r\n     */\r\n    getArrival() {\r\n        const destination = this.getDestination();\r\n        const currentFlightPlan = this._flightPlans[this._currentFlightPlanIndex];\r\n        if (destination) {\r\n            const originInfos = destination.infos;\r\n            if (originInfos.arrivals !== undefined && currentFlightPlan.procedureDetails.arrivalIndex !== -1) {\r\n                return originInfos.arrivals[currentFlightPlan.procedureDetails.arrivalIndex];\r\n            }\r\n        }\r\n        return undefined;\r\n    }\r\n    /**\r\n     * Gets the currently selected approach information for the current flight plan.\r\n     */\r\n    getAirportApproach() {\r\n        const destination = this.getDestination();\r\n        const currentFlightPlan = this._flightPlans[this._currentFlightPlanIndex];\r\n        if (destination) {\r\n            const originInfos = destination.infos;\r\n            if (originInfos.approaches !== undefined && currentFlightPlan.procedureDetails.approachIndex !== -1) {\r\n                return originInfos.approaches[currentFlightPlan.procedureDetails.approachIndex];\r\n            }\r\n        }\r\n        return undefined;\r\n    }\r\n    getApproachConstraints() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const approachWaypoints = [];\r\n            const destination = yield this._parentInstrument.facilityLoader.getFacilityRaw(this.getDestination().icao);\r\n            const currentFlightPlan = this._flightPlans[this._currentFlightPlanIndex];\r\n            if (destination) {\r\n                const approach = destination.approaches[currentFlightPlan.procedureDetails.approachIndex];\r\n                if (approach) {\r\n                    let approachTransition = approach.transitions[0];\r\n                    if (approach.transitions.length > 0) {\r\n                        approachTransition = approach.transitions[currentFlightPlan.procedureDetails.approachTransitionIndex];\r\n                    }\r\n                    if (approach && approach.finalLegs) {\r\n                        for (let i = 0; i < approach.finalLegs.length; i++) {\r\n                            const wp = new WayPoint(this._parentInstrument);\r\n                            wp.icao = approach.finalLegs[i].fixIcao;\r\n                            wp.ident = wp.icao.substr(7);\r\n                            wp.legAltitudeDescription = approach.finalLegs[i].altDesc;\r\n                            wp.legAltitude1 = approach.finalLegs[i].altitude1 * 3.28084;\r\n                            wp.legAltitude2 = approach.finalLegs[i].altitude2 * 3.28084;\r\n                            approachWaypoints.push(wp);\r\n                        }\r\n                    }\r\n                    if (approachTransition && approachTransition.legs) {\r\n                        for (let i = 0; i < approachTransition.legs.length; i++) {\r\n                            const wp = new WayPoint(this._parentInstrument);\r\n                            wp.icao = approachTransition.legs[i].fixIcao;\r\n                            wp.ident = wp.icao.substr(7);\r\n                            wp.legAltitudeDescription = approachTransition.legs[i].altDesc;\r\n                            wp.legAltitude1 = approachTransition.legs[i].altitude1 * 3.28084;\r\n                            wp.legAltitude2 = approachTransition.legs[i].altitude2 * 3.28084;\r\n                            approachWaypoints.push(wp);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            return approachWaypoints;\r\n        });\r\n    }\r\n    /**\r\n     * Gets the departure waypoints for the current flight plan.\r\n     */\r\n    getDepartureWaypoints() {\r\n        return this._flightPlans[this._currentFlightPlanIndex].departure.waypoints;\r\n    }\r\n    /**\r\n     * Gets a map of the departure waypoints (?)\r\n     */\r\n    getDepartureWaypointsMap() {\r\n        return this._flightPlans[this._currentFlightPlanIndex].departure.waypoints;\r\n    }\r\n    /**\r\n     * Gets the enroute waypoints for the current flight plan.\r\n     * @param outFPIndex An array of waypoint indexes to be pushed to.\r\n     */\r\n    getEnRouteWaypoints(outFPIndex) {\r\n        const currentFlightPlan = this._flightPlans[this._currentFlightPlanIndex];\r\n        const enrouteSegment = currentFlightPlan.enroute;\r\n        if (enrouteSegment !== FlightPlanSegment.Empty) {\r\n            for (let i = 0; i < enrouteSegment.waypoints.length; i++) {\r\n                outFPIndex.push(enrouteSegment.offset + i);\r\n            }\r\n        }\r\n        return enrouteSegment.waypoints;\r\n    }\r\n    /**\r\n     * Gets the index of the last waypoint in the enroute segment of the current flight plan.\r\n     */\r\n    getEnRouteWaypointsLastIndex() {\r\n        const currentFlightPlan = this._flightPlans[this._currentFlightPlanIndex];\r\n        const enrouteSegment = currentFlightPlan.enroute;\r\n        return enrouteSegment.offset + (enrouteSegment.waypoints.length - 1);\r\n    }\r\n    /**\r\n     * Gets the arrival waypoints for the current flight plan.\r\n     */\r\n    getArrivalWaypoints() {\r\n        return this._flightPlans[this._currentFlightPlanIndex].arrival.waypoints;\r\n    }\r\n    /**\r\n     * Gets the arrival waypoints for the current flight plan as a map. (?)\r\n     */\r\n    getArrivalWaypointsMap() {\r\n        return this._flightPlans[this._currentFlightPlanIndex].arrival.waypoints;\r\n    }\r\n    /**\r\n     * Gets the waypoints for the current flight plan with altitude constraints.\r\n     */\r\n    getWaypointsWithAltitudeConstraints() {\r\n        return this._flightPlans[this._currentFlightPlanIndex].waypoints;\r\n    }\r\n    /**\r\n     * Gets the flight plan segment for a flight plan waypoint.\r\n     * @param waypoint The waypoint we want to find the segment for.\r\n     */\r\n    getSegmentFromWaypoint(waypoint) {\r\n        const index = waypoint === undefined ? this.getActiveWaypointIndex() : this.indexOfWaypoint(waypoint);\r\n        const currentFlightPlan = this._flightPlans[this._currentFlightPlanIndex];\r\n        return currentFlightPlan.findSegmentByWaypointIndex(index);\r\n    }\r\n    /**\r\n     * Sets the destination for the current flight plan.\r\n     * @param icao The ICAO designation for the destination airfield.\r\n     * @param callback A callback to call once the operation completes.\r\n     */\r\n    setDestination(icao, callback = () => { }) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const waypoint = yield this._parentInstrument.facilityLoader.getFacilityRaw(icao);\r\n            const currentFlightPlan = this._flightPlans[this._currentFlightPlanIndex];\r\n            if (currentFlightPlan.hasDestination) {\r\n                currentFlightPlan.removeWaypoint(currentFlightPlan.length - 1);\r\n            }\r\n            this._flightPlans[this._currentFlightPlanIndex].addWaypoint(waypoint);\r\n            this._updateFlightPlanVersion();\r\n            callback();\r\n        });\r\n    }\r\n    /**\r\n     * Adds a waypoint to the current flight plan.\r\n     * @param icao The ICAO designation for the waypoint.\r\n     * @param index The index of the waypoint to add.\r\n     * @param callback A callback to call once the operation completes.\r\n     * @param setActive Whether or not to set the added waypoint as active immediately.\r\n     */\r\n    addWaypoint(icao, index = Infinity, callback = () => { }, setActive = true) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const currentFlightPlan = this._flightPlans[this._currentFlightPlanIndex];\r\n            const waypoint = yield this._parentInstrument.facilityLoader.getFacilityRaw(icao);\r\n            currentFlightPlan.addWaypoint(waypoint, index);\r\n            if (setActive) {\r\n                //currentFlightPlan.activeWaypointIndex = index;\r\n            }\r\n            this._updateFlightPlanVersion();\r\n            callback();\r\n        });\r\n    }\r\n    /**\r\n     * Adds a user waypoint to the current flight plan.\r\n     * @param waypoint The user waypoint to add.\r\n     * @param index The index to add the waypoint at in the flight plan.\r\n     * @param callback A callback to call once the operation completes.\r\n     */\r\n    addUserWaypoint(waypoint, index = Infinity, callback = () => { }) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const currentFlightPlan = this._flightPlans[this._currentFlightPlanIndex];\r\n            currentFlightPlan.addWaypoint(waypoint, index);\r\n            this._updateFlightPlanVersion();\r\n            callback();\r\n        });\r\n    }\r\n    /**\r\n     * Sets the altitude for a waypoint in the current flight plan.\r\n     * @param altitude The altitude to set for the waypoint.\r\n     * @param index The index of the waypoint to set.\r\n     * @param callback A callback to call once the operation is complete.\r\n     */\r\n    setWaypointAltitude(altitude, index, callback = () => { }) {\r\n        const currentFlightPlan = this._flightPlans[this._currentFlightPlanIndex];\r\n        const waypoint = currentFlightPlan.getWaypoint(index);\r\n        if (waypoint) {\r\n            waypoint.infos.coordinates.alt = altitude;\r\n            this._updateFlightPlanVersion();\r\n        }\r\n        callback();\r\n    }\r\n    /**\r\n     * Sets additional data on a waypoint in the current flight plan.\r\n     * @param index The index of the waypoint to set additional data for.\r\n     * @param key The key of the data.\r\n     * @param value The value of the data.\r\n     * @param callback A callback to call once the operation is complete.\r\n     */\r\n    setWaypointAdditionalData(index, key, value, callback = () => { }) {\r\n        const currentFlightPlan = this._flightPlans[this._currentFlightPlanIndex];\r\n        const waypoint = currentFlightPlan.getWaypoint(index);\r\n        if (waypoint) {\r\n            waypoint.additionalData[key] = value;\r\n            this._updateFlightPlanVersion();\r\n        }\r\n        callback();\r\n    }\r\n    /**\r\n     * Gets additional data on a waypoint in the current flight plan.\r\n     * @param index The index of the waypoint to set additional data for.\r\n     * @param key The key of the data.\r\n     * @param callback A callback to call with the value once the operation is complete.\r\n     */\r\n    getWaypointAdditionalData(index, key, callback = () => { }) {\r\n        const currentFlightPlan = this._flightPlans[this._currentFlightPlanIndex];\r\n        const waypoint = currentFlightPlan.getWaypoint(index);\r\n        if (waypoint) {\r\n            callback(waypoint.additionalData[key]);\r\n        }\r\n        else {\r\n            callback(undefined);\r\n        }\r\n    }\r\n    /**\r\n     * Reverses the currently active flight plan.\r\n     * @param {() => void} callback A callback to call when the operation is complete.\r\n     */\r\n    invertActiveFlightPlan(callback = () => { }) {\r\n        this._flightPlans[this._currentFlightPlanIndex].reverse();\r\n        this._updateFlightPlanVersion();\r\n        callback();\r\n    }\r\n    /**\r\n     * Not sure what this is supposed to do.\r\n     * @param callback Stuff?\r\n     */\r\n    getApproachIfIcao(callback = () => { }) {\r\n        callback(this.getApproach());\r\n    }\r\n    /**\r\n     * Unused\r\n     * @param {*} _callback Unused\r\n     */\r\n    addFlightPlanUpdateCallback(_callback) {\r\n    }\r\n    /**\r\n     * Adds a waypoint to the currently active flight plan by ident(?)\r\n     * @param ident The ident of the waypoint.\r\n     * @param index The index to add the waypoint at.\r\n     * @param callback A callback to call when the operation finishes.\r\n     */\r\n    addWaypointByIdent(ident, index, callback = EmptyCallback.Void) {\r\n        this.addWaypoint(ident, index, callback);\r\n    }\r\n    /**\r\n     * Removes a waypoint from the currently active flight plan.\r\n     * @param index The index of the waypoint to remove.\r\n     * @param thenSetActive Unused\r\n     * @param callback A callback to call when the operation finishes.\r\n     */\r\n    removeWaypoint(index, thenSetActive = false, callback = () => { }) {\r\n        this._flightPlans[this._currentFlightPlanIndex].removeWaypoint(index);\r\n        this._updateFlightPlanVersion();\r\n        callback();\r\n    }\r\n    /**\r\n     * Gets the index of a given waypoint in the current flight plan.\r\n     * @param waypoint The waypoint to get the index of.\r\n     */\r\n    indexOfWaypoint(waypoint) {\r\n        return this._flightPlans[this._currentFlightPlanIndex].waypoints.indexOf(waypoint);\r\n    }\r\n    /**\r\n     * Gets the number of waypoints in a flight plan.\r\n     * @param flightPlanIndex The index of the flight plan. If omitted, will get the current flight plan.\r\n     */\r\n    getWaypointsCount(flightPlanIndex = NaN) {\r\n        var _a, _b;\r\n        if (isNaN(flightPlanIndex)) {\r\n            flightPlanIndex = this._currentFlightPlanIndex;\r\n        }\r\n        return (_b = (_a = this._flightPlans[flightPlanIndex]) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0;\r\n    }\r\n    /**\r\n     * Gets a count of the number of departure waypoints in the current flight plan.\r\n     */\r\n    getDepartureWaypointsCount() {\r\n        return this._flightPlans[this._currentFlightPlanIndex].departure.waypoints.length;\r\n    }\r\n    /**\r\n     * Gets a count of the number of arrival waypoints in the current flight plan.\r\n     */\r\n    getArrivalWaypointsCount() {\r\n        return this._flightPlans[this._currentFlightPlanIndex].arrival.waypoints.length;\r\n    }\r\n    /**\r\n     * Gets a waypoint from a flight plan.\r\n     * @param index The index of the waypoint to get.\r\n     * @param flightPlanIndex The index of the flight plan to get the waypoint from. If omitted, will get from the current flight plan.\r\n     * @param considerApproachWaypoints Whether or not to consider approach waypoints.\r\n     */\r\n    getWaypoint(index, flightPlanIndex = NaN, considerApproachWaypoints) {\r\n        if (isNaN(flightPlanIndex)) {\r\n            flightPlanIndex = this._currentFlightPlanIndex;\r\n        }\r\n        return this._flightPlans[flightPlanIndex].getWaypoint(index);\r\n    }\r\n    /**\r\n     * Gets all non-approach waypoints from a flight plan.\r\n     * @param flightPlanIndex The index of the flight plan to get the waypoints from. If omitted, will get from the current flight plan.\r\n     */\r\n    getWaypoints(flightPlanIndex = NaN) {\r\n        if (isNaN(flightPlanIndex)) {\r\n            flightPlanIndex = this._currentFlightPlanIndex;\r\n        }\r\n        return this._flightPlans[flightPlanIndex].nonApproachWaypoints;\r\n    }\r\n    /**\r\n     * Gets all waypoints from a flight plan.\r\n     * @param flightPlanIndex The index of the flight plan to get the waypoints from. If omitted, will get from the current flight plan.\r\n     */\r\n    getAllWaypoints(flightPlanIndex) {\r\n        if (flightPlanIndex === undefined) {\r\n            flightPlanIndex = this._currentFlightPlanIndex;\r\n        }\r\n        if (this._flightPlans[flightPlanIndex] === undefined) {\r\n            return [];\r\n        }\r\n        return this._flightPlans[flightPlanIndex].waypoints;\r\n    }\r\n    /**\r\n     * Gets the index of the departure runway in the current flight plan.\r\n     */\r\n    getDepartureRunwayIndex() {\r\n        const currentFlightPlan = this._flightPlans[this._currentFlightPlanIndex];\r\n        if (currentFlightPlan.hasOrigin) {\r\n            return currentFlightPlan.procedureDetails.departureRunwayIndex;\r\n        }\r\n        return -1;\r\n    }\r\n    /**\r\n     * Gets the string value of the departure runway in the current flight plan.\r\n     */\r\n    getDepartureRunway() {\r\n        const currentFlightPlan = this._flightPlans[this._currentFlightPlanIndex];\r\n        if (currentFlightPlan.hasOrigin\r\n            && currentFlightPlan.procedureDetails.departureRunwayIndex !== -1\r\n            && currentFlightPlan.procedureDetails.departureIndex !== -1) {\r\n            const depRunway = currentFlightPlan.originAirfield.infos\r\n                .departures[currentFlightPlan.procedureDetails.departureIndex]\r\n                .runwayTransitions[currentFlightPlan.procedureDetails.departureRunwayIndex]\r\n                .name.replace(\"RW\", \"\");\r\n            const runway = currentFlightPlan.originAirfield.infos.oneWayRunways\r\n                .find(r => { return r.designation.indexOf(depRunway) !== -1; });\r\n            if (runway) {\r\n                return runway;\r\n            }\r\n            else {\r\n                return undefined;\r\n            }\r\n        }\r\n        else if (currentFlightPlan.procedureDetails.originRunwayIndex !== -1) {\r\n            return currentFlightPlan.originAirfield.infos.oneWayRunways[currentFlightPlan.procedureDetails.originRunwayIndex];\r\n        }\r\n        return undefined;\r\n    }\r\n    /**\r\n     * Gets the heading of the selected departure runway.\r\n     */\r\n    getDepartureRunwayDirection() {\r\n        const origin = this.getOrigin();\r\n        const currentFlightPlan = this._flightPlans[this._currentFlightPlanIndex];\r\n        if (origin && origin.infos instanceof AirportInfo && currentFlightPlan.procedureDetails.originRunwayIndex !== -1) {\r\n            const runway = origin.infos.oneWayRunways[currentFlightPlan.procedureDetails.originRunwayIndex];\r\n            return runway.direction;\r\n        }\r\n        return undefined;\r\n    }\r\n    /**\r\n     * Gets the best runway based on the current plane heading.\r\n     */\r\n    getDetectedCurrentRunway() {\r\n        const origin = this.getOrigin();\r\n        if (origin && origin.infos instanceof AirportInfo) {\r\n            const runways = origin.infos.oneWayRunways;\r\n            if (runways && runways.length > 0) {\r\n                const direction = Simplane.getHeadingMagnetic();\r\n                let bestRunway = runways[0];\r\n                let bestDeltaAngle = Math.abs(Avionics.Utils.diffAngle(direction, bestRunway.direction));\r\n                for (let i = 1; i < runways.length; i++) {\r\n                    const deltaAngle = Math.abs(Avionics.Utils.diffAngle(direction, runways[i].direction));\r\n                    if (deltaAngle < bestDeltaAngle) {\r\n                        bestDeltaAngle = deltaAngle;\r\n                        bestRunway = runways[i];\r\n                    }\r\n                }\r\n                return bestRunway;\r\n            }\r\n        }\r\n        return undefined;\r\n    }\r\n    /**\r\n     * Gets the departure procedure index for the current flight plan.\r\n     */\r\n    getDepartureProcIndex() {\r\n        const currentFlightPlan = this._flightPlans[this._currentFlightPlanIndex];\r\n        return currentFlightPlan.procedureDetails.departureIndex;\r\n    }\r\n    /**\r\n     * Sets the departure procedure index for the current flight plan.\r\n     * @param index The index of the departure procedure in the origin airport departures information.\r\n     * @param callback A callback to call when the operation completes.\r\n     */\r\n    setDepartureProcIndex(index, callback = () => { }) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const currentFlightPlan = this._flightPlans[this._currentFlightPlanIndex];\r\n            if (currentFlightPlan.procedureDetails.departureIndex !== index) {\r\n                currentFlightPlan.procedureDetails.departureIndex = index;\r\n                yield currentFlightPlan.buildDeparture();\r\n                this._updateFlightPlanVersion();\r\n            }\r\n            callback();\r\n        });\r\n    }\r\n    /**\r\n     * Sets the departure runway index for the current flight plan.\r\n     * @param index The index of the runway in the origin airport runway information.\r\n     * @param callback A callback to call when the operation completes.\r\n     */\r\n    setDepartureRunwayIndex(index, callback = EmptyCallback.Void) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const currentFlightPlan = this._flightPlans[this._currentFlightPlanIndex];\r\n            if (currentFlightPlan.procedureDetails.departureIndex > -1 && index > -1) {\r\n                const apt = currentFlightPlan.originAirfield.infos;\r\n                const rwyTrans = apt.departures[currentFlightPlan.procedureDetails.departureIndex].runwayTransitions;\r\n                if (rwyTrans !== undefined && rwyTrans.length - 1 < index) {\r\n                    callback();\r\n                    return;\r\n                }\r\n            }\r\n            if (currentFlightPlan.procedureDetails.departureRunwayIndex !== index) {\r\n                currentFlightPlan.procedureDetails.departureRunwayIndex = index;\r\n                yield currentFlightPlan.buildDeparture();\r\n                this._updateFlightPlanVersion();\r\n            }\r\n            callback();\r\n        });\r\n    }\r\n    /**\r\n     * Sets the origin runway index for the current flight plan.\r\n     * @param index The index of the runway in the origin airport runway information.\r\n     * @param callback A callback to call when the operation completes.\r\n     */\r\n    setOriginRunwayIndex(index, callback = EmptyCallback.Void) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const currentFlightPlan = this._flightPlans[this._currentFlightPlanIndex];\r\n            if (currentFlightPlan.procedureDetails.originRunwayIndex !== index) {\r\n                currentFlightPlan.procedureDetails.originRunwayIndex = index;\r\n                yield currentFlightPlan.buildDeparture();\r\n                this._updateFlightPlanVersion();\r\n            }\r\n            callback();\r\n        });\r\n    }\r\n    /**\r\n     * Gets the departure transition index for the current flight plan.\r\n     */\r\n    getDepartureEnRouteTransitionIndex() {\r\n        const currentFlightPlan = this._flightPlans[this._currentFlightPlanIndex];\r\n        return currentFlightPlan.procedureDetails.departureTransitionIndex;\r\n    }\r\n    /**\r\n     * Sets the departure transition index for the current flight plan.\r\n     * @param index The index of the departure transition to select.\r\n     * @param callback A callback to call when the operation completes.\r\n     */\r\n    setDepartureEnRouteTransitionIndex(index, callback = EmptyCallback.Void) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const currentFlightPlan = this._flightPlans[this._currentFlightPlanIndex];\r\n            if (currentFlightPlan.procedureDetails.departureTransitionIndex !== index) {\r\n                currentFlightPlan.procedureDetails.departureTransitionIndex = index;\r\n                yield currentFlightPlan.buildDeparture();\r\n                this._updateFlightPlanVersion();\r\n            }\r\n            callback();\r\n        });\r\n    }\r\n    /**\r\n     * Unused\r\n     */\r\n    getDepartureDiscontinuity() {\r\n    }\r\n    /**\r\n     * Unused\r\n     * @param callback A callback to call when the operation completes.\r\n     */\r\n    clearDepartureDiscontinuity(callback = EmptyCallback.Void) {\r\n        callback();\r\n    }\r\n    /**\r\n     * Removes the departure from the currently active flight plan.\r\n     * @param callback A callback to call when the operation completes.\r\n     */\r\n    removeDeparture(callback = () => { }) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const currentFlightPlan = this._flightPlans[this._currentFlightPlanIndex];\r\n            currentFlightPlan.procedureDetails.departureIndex = -1;\r\n            yield currentFlightPlan.buildDeparture();\r\n            this._updateFlightPlanVersion();\r\n            callback();\r\n        });\r\n    }\r\n    /**\r\n     * Gets the arrival procedure index in the currenly active flight plan.\r\n     */\r\n    getArrivalProcIndex() {\r\n        const currentFlightPlan = this._flightPlans[this._currentFlightPlanIndex];\r\n        if (currentFlightPlan.hasDestination && currentFlightPlan.procedureDetails.arrivalIndex !== -1) {\r\n            return currentFlightPlan.procedureDetails.arrivalIndex;\r\n        }\r\n        return -1;\r\n    }\r\n    /**\r\n     * Gets the arrival transition procedure index in the currently active flight plan.\r\n     */\r\n    getArrivalTransitionIndex() {\r\n        const currentFlightPlan = this._flightPlans[this._currentFlightPlanIndex];\r\n        return currentFlightPlan.procedureDetails.arrivalTransitionIndex;\r\n    }\r\n    /**\r\n     * Sets the arrival procedure index for the current flight plan.\r\n     * @param {Number} index The index of the arrival procedure to select.\r\n     * @param {() => void} callback A callback to call when the operation completes.\r\n     */\r\n    setArrivalProcIndex(index, callback = () => { }) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const currentFlightPlan = this._flightPlans[this._currentFlightPlanIndex];\r\n            if (currentFlightPlan.procedureDetails.arrivalIndex !== index) {\r\n                currentFlightPlan.procedureDetails.arrivalIndex = index;\r\n                yield currentFlightPlan.buildArrival();\r\n                this._updateFlightPlanVersion();\r\n            }\r\n            callback();\r\n        });\r\n    }\r\n    /**\r\n     * Unused\r\n     */\r\n    getArrivalDiscontinuity() {\r\n    }\r\n    /**\r\n     * Unused\r\n     * @param {*} callback\r\n     */\r\n    clearArrivalDiscontinuity(callback = EmptyCallback.Void) {\r\n        callback();\r\n    }\r\n    /**\r\n     * Clears a discontinuity from the end of a waypoint.\r\n     * @param index\r\n     */\r\n    clearDiscontinuity(index) {\r\n        const currentFlightPlan = this._flightPlans[this._currentFlightPlanIndex];\r\n        const waypoint = currentFlightPlan.getWaypoint(index);\r\n        if (waypoint !== undefined) {\r\n            waypoint.endsInDiscontinuity = false;\r\n        }\r\n        this._updateFlightPlanVersion();\r\n    }\r\n    /**\r\n     * Sets the arrival transition index for the current flight plan.\r\n     * @param {Number} index The index of the arrival transition to select.\r\n     * @param {() => void} callback A callback to call when the operation completes.\r\n     */\r\n    setArrivalEnRouteTransitionIndex(index, callback = () => { }) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const currentFlightPlan = this._flightPlans[this._currentFlightPlanIndex];\r\n            if (currentFlightPlan.procedureDetails.arrivalTransitionIndex !== index) {\r\n                currentFlightPlan.procedureDetails.arrivalTransitionIndex = index;\r\n                yield currentFlightPlan.buildArrival();\r\n                this._updateFlightPlanVersion();\r\n            }\r\n            callback();\r\n        });\r\n    }\r\n    /**\r\n     * Sets the arrival runway index in the currently active flight plan.\r\n     * @param {Number} index The index of the runway to select.\r\n     * @param {() => void} callback A callback to call when the operation completes.\r\n     */\r\n    setArrivalRunwayIndex(index, callback = () => { }) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const currentFlightPlan = this._flightPlans[this._currentFlightPlanIndex];\r\n            if (currentFlightPlan.procedureDetails.arrivalRunwayIndex !== index) {\r\n                currentFlightPlan.procedureDetails.arrivalRunwayIndex = index;\r\n                yield currentFlightPlan.buildArrival();\r\n                this._updateFlightPlanVersion();\r\n            }\r\n            callback();\r\n        });\r\n    }\r\n    /**\r\n     * Sets the destination runway index in the currently active flight plan.\r\n     * @param index The index of the runway to select.\r\n     * @param runwayExtension The length of the runway extension fix to create, or -1 if none.\r\n     * @param callback A callback to call when the operation completes.\r\n     */\r\n    setDestinationRunwayIndex(index, runwayExtension = -1, callback = () => { }) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const currentFlightPlan = this._flightPlans[this._currentFlightPlanIndex];\r\n            if (currentFlightPlan.procedureDetails.destinationRunwayIndex !== index\r\n                || currentFlightPlan.procedureDetails.destinationRunwayExtension !== runwayExtension) {\r\n                currentFlightPlan.procedureDetails.destinationRunwayIndex = index;\r\n                currentFlightPlan.procedureDetails.destinationRunwayExtension = runwayExtension;\r\n                yield currentFlightPlan.buildApproach();\r\n                this._updateFlightPlanVersion();\r\n            }\r\n            callback();\r\n        });\r\n    }\r\n    /**\r\n     * Gets the index of the approach in the currently active flight plan.\r\n     */\r\n    getApproachIndex() {\r\n        const currentFlightPlan = this._flightPlans[this._currentFlightPlanIndex];\r\n        return currentFlightPlan.procedureDetails.approachIndex;\r\n    }\r\n    /**\r\n     * Sets the approach index in the currently active flight plan.\r\n     * @param index The index of the approach in the destination airport information.\r\n     * @param callback A callback to call when the operation has completed.\r\n     * @param transition The approach transition index to set in the approach information.\r\n     */\r\n    setApproachIndex(index, callback = () => { }, transition = -1) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const currentFlightPlan = this._flightPlans[this._currentFlightPlanIndex];\r\n            if (currentFlightPlan.procedureDetails.approachIndex !== index) {\r\n                currentFlightPlan.procedureDetails.approachIndex = index;\r\n                yield currentFlightPlan.buildApproach();\r\n                this._updateFlightPlanVersion();\r\n            }\r\n            callback();\r\n        });\r\n    }\r\n    /**\r\n     * Whether or not an approach is loaded in the current flight plan.\r\n     * @param forceSimVarCall Unused\r\n     */\r\n    isLoadedApproach(forceSimVarCall = false) {\r\n        const currentFlightPlan = this._flightPlans[this._currentFlightPlanIndex];\r\n        return currentFlightPlan.procedureDetails.approachIndex !== -1;\r\n    }\r\n    /**\r\n     * Whether or not the approach is active in the current flight plan.\r\n     * @param forceSimVarCall Unused\r\n     */\r\n    isActiveApproach(forceSimVarCall = false) {\r\n        const currentFlightPlan = this._flightPlans[this._currentFlightPlanIndex];\r\n        return currentFlightPlan.approach.waypoints.length > 0\r\n            && currentFlightPlan.activeWaypointIndex >= currentFlightPlan.approach.offset;\r\n    }\r\n    /**\r\n     * Activates the approach segment in the current flight plan.\r\n     * @param {() => void} callback\r\n     */\r\n    activateApproach(callback = EmptyCallback.Void) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const currentFlightPlan = this._flightPlans[this._currentFlightPlanIndex];\r\n            if (!this.isActiveApproach()) {\r\n                //await GPS.setActiveWaypoint(currentFlightPlan.approach.offset);\r\n            }\r\n            callback();\r\n        });\r\n    }\r\n    /**\r\n     * Deactivates the approach segments in the current flight plan.\r\n     */\r\n    deactivateApproach() {\r\n    }\r\n    /**\r\n     * Attemptes to auto-activate the approach in the current flight plan.\r\n     */\r\n    tryAutoActivateApproach() {\r\n    }\r\n    /**\r\n     * Returns a value indicating if we are in a approach/arrival segment.\r\n     */\r\n    isApproachActivated() {\r\n        const fpln = this.getCurrentFlightPlan();\r\n        const segment = fpln.findSegmentByWaypointIndex(fpln.activeWaypointIndex);\r\n        return segment.type === SegmentType.Approach || segment.type === SegmentType.Arrival;\r\n    }\r\n    /**\r\n     * Gets the index of the active waypoint on the approach in the current flight plan.\r\n     */\r\n    getApproachActiveWaypointIndex() {\r\n        return this._flightPlans[this._currentFlightPlanIndex].activeWaypointIndex;\r\n    }\r\n    /**\r\n     * Gets the approach procedure from the current flight plan destination airport procedure information.\r\n     */\r\n    getApproach() {\r\n        const currentFlightPlan = this._flightPlans[this._currentFlightPlanIndex];\r\n        if (currentFlightPlan.hasDestination && currentFlightPlan.procedureDetails.approachIndex !== -1) {\r\n            const app = currentFlightPlan.destinationAirfield.infos.approaches[currentFlightPlan.procedureDetails.approachIndex];\r\n            if (app !== undefined) {\r\n                app.isLocalizer = function () {\r\n                    return this.name.indexOf(\"ILS\") > -1 || this.name.indexOf(\"LOC\") > -1;\r\n                }.bind(app);\r\n            }\r\n            return app;\r\n        }\r\n        return undefined;\r\n    }\r\n    /**\r\n     * Get the nav frequency for the selected approach in the current flight plan.\r\n     * @returns The approach nav frequency, if an ILS approach.\r\n     */\r\n    getApproachNavFrequency() {\r\n        const approach = this.getApproach();\r\n        if (approach && approach.name.includes('ILS')) {\r\n            const destination = this.getDestination();\r\n            const approachRunway = this.getApproach().runway.trim();\r\n            const aptInfo = destination.infos;\r\n            const frequency = aptInfo.namedFrequencies.find(f => f.name.replace(\"RW0\", \"\").replace(\"RW\", \"\").indexOf(approachRunway) !== -1);\r\n            if (frequency) {\r\n                return frequency.value;\r\n            }\r\n        }\r\n        return NaN;\r\n    }\r\n    /**\r\n     * Gets the index of the approach transition in the current flight plan.\r\n     */\r\n    getApproachTransitionIndex() {\r\n        const currentFlightPlan = this._flightPlans[this._currentFlightPlanIndex];\r\n        return currentFlightPlan.procedureDetails.approachTransitionIndex;\r\n    }\r\n    /**\r\n     * Gets the last waypoint index before the start of the approach segment in\r\n     * the current flight plan.\r\n     */\r\n    getLastIndexBeforeApproach() {\r\n        const currentFlightPlan = this._flightPlans[this._currentFlightPlanIndex];\r\n        // TODO: if we have an approach return last index\r\n        if (currentFlightPlan.approach !== FlightPlanSegment.Empty) {\r\n            return currentFlightPlan.approach.offset - 1;\r\n        }\r\n        else {\r\n            return this.getWaypointsCount();\r\n        }\r\n    }\r\n    /**\r\n     * Gets the approach runway from the current flight plan.\r\n     */\r\n    getApproachRunway() {\r\n        const currentFlightPlan = this._flightPlans[this._currentFlightPlanIndex];\r\n        if (currentFlightPlan.hasDestination && currentFlightPlan.procedureDetails.approachIndex !== -1) {\r\n            const destination = currentFlightPlan.waypoints[currentFlightPlan.waypoints.length - 1];\r\n            const approachRunwayName = destination.infos.approaches[currentFlightPlan.procedureDetails.approachIndex].runway;\r\n            const runway = currentFlightPlan.getRunway(destination.infos.oneWayRunways, approachRunwayName);\r\n            return runway;\r\n        }\r\n        return undefined;\r\n    }\r\n    /**\r\n     * Gets the approach waypoints for the current flight plan.\r\n     * @param fpIndex The flight plan index.\r\n     */\r\n    getApproachWaypoints(fpIndex = this._currentFlightPlanIndex) {\r\n        return this._flightPlans[fpIndex].approach.waypoints;\r\n    }\r\n    /**\r\n     * Sets the approach transition index for the current flight plan.\r\n     * @param index The index of the transition in the destination airport approach information.\r\n     * @param callback A callback to call when the operation completes.\r\n     */\r\n    setApproachTransitionIndex(index, callback = () => { }) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const currentFlightPlan = this._flightPlans[this._currentFlightPlanIndex];\r\n            if (currentFlightPlan.procedureDetails.approachTransitionIndex !== index) {\r\n                currentFlightPlan.procedureDetails.approachTransitionIndex = index;\r\n                yield currentFlightPlan.buildApproach();\r\n                this._updateFlightPlanVersion();\r\n            }\r\n            callback();\r\n        });\r\n    }\r\n    /**\r\n     * Removes the arrival segment from the current flight plan.\r\n     * @param callback A callback to call when the operation completes.\r\n     */\r\n    removeArrival(callback = () => { }) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const currentFlightPlan = this._flightPlans[this._currentFlightPlanIndex];\r\n            currentFlightPlan.procedureDetails.arrivalIndex = -1;\r\n            currentFlightPlan.procedureDetails.arrivalRunwayIndex = -1;\r\n            currentFlightPlan.procedureDetails.arrivalTransitionIndex = -1;\r\n            yield currentFlightPlan.buildArrival();\r\n            this._updateFlightPlanVersion();\r\n            callback();\r\n        });\r\n    }\r\n    /**\r\n     * Activates direct-to an ICAO designated fix.\r\n     * @param icao The ICAO designation for the fix to fly direct-to.\r\n     * @param callback A callback to call when the operation completes.\r\n     */\r\n    activateDirectTo(icao, callback = EmptyCallback.Void) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const currentFlightPlan = this._flightPlans[this._currentFlightPlanIndex];\r\n            const waypointIndex = currentFlightPlan.waypoints.findIndex(w => w.icao === icao);\r\n            yield this.activateDirectToByIndex(waypointIndex, callback);\r\n        });\r\n    }\r\n    /**\r\n     * Activates direct-to an existing waypoint in the flight plan.\r\n     * @param waypointIndex The index of the waypoint.\r\n     * @param callback A callback to call when the operation completes.\r\n     */\r\n    activateDirectToByIndex(waypointIndex, callback = EmptyCallback.Void) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const currentFlightPlan = this._flightPlans[this._currentFlightPlanIndex];\r\n            const waypoint = currentFlightPlan.getWaypoint(waypointIndex);\r\n            if (waypointIndex !== -1) {\r\n                this.pauseSync();\r\n                while (currentFlightPlan.waypoints.findIndex(w => w.ident === \"$DIR\") > -1) {\r\n                    currentFlightPlan.removeWaypoint(currentFlightPlan.waypoints.findIndex(w => w.ident === \"$DIR\"));\r\n                }\r\n                const newWaypointIndex = currentFlightPlan.waypoints.findIndex(x => x === waypoint);\r\n                currentFlightPlan.addDirectTo(newWaypointIndex);\r\n                this.resumeSync();\r\n            }\r\n            callback();\r\n        });\r\n    }\r\n    /**\r\n     * Cancels the current direct-to and proceeds back along the flight plan.\r\n     * @param callback A callback to call when the operation completes.\r\n     */\r\n    cancelDirectTo(callback = EmptyCallback.Void) {\r\n        const currentFlightPlan = this._flightPlans[this._currentFlightPlanIndex];\r\n        //currentFlightPlan.directTo.cancel();\r\n        callback();\r\n    }\r\n    /**\r\n     * Gets whether or not the flight plan is current in a direct-to procedure.\r\n     */\r\n    getIsDirectTo() {\r\n        return this._flightPlans[this._currentFlightPlanIndex].directTo.isActive;\r\n    }\r\n    /**\r\n     * Gets the target of the direct-to procedure in the current flight plan.\r\n     */\r\n    getDirectToTarget() {\r\n        const currentFlightPlan = this._flightPlans[this._currentFlightPlanIndex];\r\n        if (currentFlightPlan.directTo.waypointIsInFlightPlan) {\r\n            return currentFlightPlan.waypoints[currentFlightPlan.directTo.planWaypointIndex];\r\n        }\r\n        else {\r\n            return currentFlightPlan.directTo.waypoint;\r\n        }\r\n    }\r\n    /**\r\n     * Gets the origin/start waypoint of the direct-to procedure in the current flight plan.\r\n     */\r\n    getDirecToOrigin() {\r\n        return this._flightPlans[this._currentFlightPlanIndex].directTo.interceptPoints[0];\r\n    }\r\n    getCoordinatesHeadingAtDistanceAlongFlightPlan(distance) {\r\n    }\r\n    /**\r\n     * Adds a hold at the specified waypoint index in the flight plan.\r\n     * @param index The waypoint index to hold at.\r\n     * @param details The details of the hold to execute.\r\n     */\r\n    addHoldAtWaypointIndex(index, details) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const currentFlightPlan = this._flightPlans[this._currentFlightPlanIndex];\r\n            const waypoint = currentFlightPlan.getWaypoint(index);\r\n            if (waypoint) {\r\n                const newHoldWaypoint = Object.assign(new WayPoint(this._parentInstrument), waypoint);\r\n                newHoldWaypoint.infos = Object.assign(new WayPointInfo(this._parentInstrument), waypoint.infos);\r\n                const segment = currentFlightPlan.findSegmentByWaypointIndex(index);\r\n                newHoldWaypoint.hasHold = true;\r\n                newHoldWaypoint.holdDetails = details;\r\n                currentFlightPlan.addWaypoint(newHoldWaypoint, index + 1, segment.type);\r\n                yield this._updateFlightPlanVersion();\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Modifies a hold at the specified waypoint index in the flight plan.\r\n     * @param index The waypoint index to hold at.\r\n     * @param details The details of the hold to execute.\r\n     */\r\n    modifyHoldDetails(index, details) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const currentFlightPlan = this._flightPlans[this._currentFlightPlanIndex];\r\n            const waypoint = currentFlightPlan.getWaypoint(index);\r\n            if (waypoint && waypoint.hasHold) {\r\n                waypoint.holdDetails = details;\r\n                yield this._updateFlightPlanVersion();\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Deletes a hold at the specified waypoint index in the flight plan.\r\n     * @param index The waypoint index to delete the hold at.\r\n     */\r\n    deleteHoldAtWaypointIndex(index) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const currentFlightPlan = this._flightPlans[this._currentFlightPlanIndex];\r\n            const waypoint = currentFlightPlan.getWaypoint(index);\r\n            if (waypoint && waypoint.hasHold) {\r\n                currentFlightPlan.removeWaypoint(index);\r\n                yield this._updateFlightPlanVersion();\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Gets the coordinates of a point that is a specific distance from the destination along the flight plan.\r\n     * @param distance The distance from destination we want the coordinates for.\r\n     */\r\n    getCoordinatesAtNMFromDestinationAlongFlightPlan(distance) {\r\n        const allWaypoints = this.getAllWaypoints();\r\n        const destination = this.getDestination();\r\n        if (destination) {\r\n            const fromStartDistance = destination.cumulativeDistanceInFP - distance;\r\n            let prevIndex;\r\n            let prev;\r\n            let next;\r\n            for (let i = 0; i < allWaypoints.length - 1; i++) {\r\n                prevIndex = i;\r\n                prev = allWaypoints[i];\r\n                next = allWaypoints[i + 1];\r\n                if (prev.cumulativeDistanceInFP < fromStartDistance && next.cumulativeDistanceInFP > fromStartDistance) {\r\n                    break;\r\n                }\r\n            }\r\n            const prevCD = prev.cumulativeDistanceInFP;\r\n            const nextCD = next.cumulativeDistanceInFP;\r\n            const d = (fromStartDistance - prevCD) / (nextCD - prevCD);\r\n            const output = new LatLongAlt();\r\n            output.lat = Avionics.Utils.lerpAngle(prev.infos.coordinates.lat, next.infos.coordinates.lat, d);\r\n            output.long = Avionics.Utils.lerpAngle(prev.infos.coordinates.long, next.infos.coordinates.long, d);\r\n            return output;\r\n        }\r\n    }\r\n    /**\r\n     * Gets the current stored flight plan\r\n     */\r\n    _getFlightPlan() {\r\n        const fpln = window.localStorage.getItem(FlightPlanManager.FlightPlanKey);\r\n        if (fpln === null || fpln === '') {\r\n            this._flightPlans = [];\r\n            const initFpln = new ManagedFlightPlan();\r\n            initFpln.setParentInstrument(this._parentInstrument);\r\n            this._flightPlans.push(initFpln);\r\n        }\r\n        else {\r\n            if (window.localStorage.getItem(FlightPlanManager.FlightPlanCompressedKey) == \"1\") {\r\n                this._flightPlans = JSON.parse(LZUTF8.decompress(fpln, { inputEncoding: \"StorageBinaryString\" }));\r\n            }\r\n            else {\r\n                this._flightPlans = JSON.parse(fpln);\r\n            }\r\n        }\r\n    }\r\n    getCurrentFlightPlan() {\r\n        return this._flightPlans[this._currentFlightPlanIndex];\r\n    }\r\n    getFlightPlan(index) {\r\n        return this._flightPlans[index];\r\n    }\r\n    /**\r\n     * Updates the synchronized flight plan version and saves it to shared storage.\r\n     */\r\n    _updateFlightPlanVersion() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (this._isSyncPaused) {\r\n                return;\r\n            }\r\n            let fpJson = JSON.stringify(this._flightPlans.map(fp => fp.serialize()));\r\n            if (fpJson.length > 2500000) {\r\n                fpJson = LZUTF8.compress(fpJson, { outputEncoding: \"StorageBinaryString\" });\r\n                window.localStorage.setItem(FlightPlanManager.FlightPlanCompressedKey, \"1\");\r\n            }\r\n            else {\r\n                window.localStorage.setItem(FlightPlanManager.FlightPlanCompressedKey, \"0\");\r\n            }\r\n            window.localStorage.setItem(FlightPlanManager.FlightPlanKey, fpJson);\r\n            SimVar.SetSimVarValue(FlightPlanManager.FlightPlanVersionKey, 'number', ++this._currentFlightPlanVersion);\r\n            FlightPlanAsoboSync.SaveToGame(this);\r\n        });\r\n    }\r\n    pauseSync() {\r\n        this._isSyncPaused = true;\r\n    }\r\n    resumeSync() {\r\n        this._isSyncPaused = false;\r\n        this._updateFlightPlanVersion();\r\n    }\r\n}\r\nFlightPlanManager.FlightPlanKey = \"WT.FlightPlan\";\r\nFlightPlanManager.FlightPlanCompressedKey = \"WT.FlightPlan.Compressed\";\r\nFlightPlanManager.FlightPlanVersionKey = \"L:WT.FlightPlan.Version\";\r\n//# sourceMappingURL=FlightPlanManager.js.map","references":["D:/Documents/GitHub/boufogre/salty-747/src/fpm/src/flightplanning/FlightPlanSegment.ts","D:/Documents/GitHub/boufogre/salty-747/src/fpm/src/flightplanning/FlightPlanAsoboSync.ts","D:/Documents/GitHub/boufogre/salty-747/src/fpm/src/flightplanning/HoldDetails.ts","D:/Documents/GitHub/boufogre/salty-747/src/fpm/src/flightplanning/ManagedFlightPlan.ts"],"map":"{\"version\":3,\"file\":\"FlightPlanManager.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/fpm/src/flightplanning/FlightPlanManager.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"D:/Documents/GitHub/boufogre/salty-747/src/fpm/dist/types/flightplanning/FlightPlanManager.d.ts","writeByteOrderMark":false,"text":"import { FlightPlanSegment } from './FlightPlanSegment';\r\nimport { HoldDetails } from './HoldDetails';\r\nimport { ManagedFlightPlan } from './ManagedFlightPlan';\r\n/**\r\n * A system for managing flight plan data used by various instruments.\r\n */\r\nexport declare class FlightPlanManager {\r\n    _parentInstrument: BaseInstrument;\r\n    private _isRegistered;\r\n    private _isMaster;\r\n    private _isSyncPaused;\r\n    private _currentFlightPlanVersion;\r\n    private __currentFlightPlanIndex;\r\n    static DEBUG_INSTANCE: FlightPlanManager;\r\n    static FlightPlanKey: string;\r\n    static FlightPlanCompressedKey: string;\r\n    static FlightPlanVersionKey: string;\r\n    /**\r\n     * The current stored flight plan data.\r\n     * @type ManagedFlightPlan[]\r\n     */\r\n    private _flightPlans;\r\n    /**\r\n     * Constructs an instance of the FlightPlanManager with the provided\r\n     * parent instrument attached.\r\n     * @param parentInstrument The parent instrument attached to this FlightPlanManager.\r\n     */\r\n    constructor(_parentInstrument: BaseInstrument);\r\n    get _currentFlightPlanIndex(): number;\r\n    set _currentFlightPlanIndex(value: number);\r\n    /**\r\n     * Gets the current stored version of the flight plan.\r\n     */\r\n    get CurrentFlightPlanVersion(): number;\r\n    update(_deltaTime: number): void;\r\n    onCurrentGameFlightLoaded(_callback: () => void): void;\r\n    registerListener(): void;\r\n    addHardCodedConstraints(wp: any): void;\r\n    /**\r\n     * Loads sim flight plan data into WayPoint objects for consumption.\r\n     * @param data The flight plan data to load.\r\n     * @param currentWaypoints The waypoints array to modify with the data loaded.\r\n     * @param callback A callback to call when the data has completed loading.\r\n     */\r\n    private _loadWaypoints;\r\n    /**\r\n     * Updates the current active waypoint index from the sim.\r\n     */\r\n    updateWaypointIndex(): Promise<void>;\r\n    /**\r\n     * Scans for updates to the synchronized flight plan and loads them into the flight plan\r\n     * manager if the flight plan is out of date.\r\n     * @param {() => void} callback A callback to call when the update has completed.\r\n     * @param {Boolean} log Whether or not to log the loaded flight plan value.\r\n     */\r\n    updateFlightPlan(callback?: () => void, log?: boolean): void;\r\n    /**\r\n     * Loads the flight plans from data storage.\r\n     */\r\n    _loadFlightPlans(): void;\r\n    updateCurrentApproach(callback?: () => void, log?: boolean): void;\r\n    get cruisingAltitude(): number;\r\n    /**\r\n     * Gets the index of the currently active flight plan.\r\n     */\r\n    getCurrentFlightPlanIndex(): number;\r\n    /**\r\n     * Switches the active flight plan index to the supplied index.\r\n     * @param index The index to now use for the active flight plan.\r\n     * @param callback A callback to call when the operation has completed.\r\n     */\r\n    setCurrentFlightPlanIndex(index: number, callback?: (arg0: boolean) => void): void;\r\n    /**\r\n     * Creates a new flight plan.\r\n     * @param callback A callback to call when the operation has completed.\r\n     */\r\n    createNewFlightPlan(callback?: () => void): void;\r\n    /**\r\n     * Copies the currently active flight plan into the specified flight plan index.\r\n     * @param index The index to copy the currently active flight plan into.\r\n     * @param callback A callback to call when the operation has completed.\r\n     */\r\n    copyCurrentFlightPlanInto(index: number, callback?: () => void): Promise<void>;\r\n    /**\r\n     * Copies the flight plan at the specified index to the currently active flight plan index.\r\n     * @param index The index to copy into the currently active flight plan.\r\n     * @param callback A callback to call when the operation has completed.\r\n     */\r\n    copyFlightPlanIntoCurrent(index: number, callback?: () => void): Promise<void>;\r\n    /**\r\n     * Clears the currently active flight plan.\r\n     * @param callback A callback to call when the operation has completed.\r\n     */\r\n    clearFlightPlan(callback?: () => void): Promise<void>;\r\n    /**\r\n     * Gets the origin of the currently active flight plan.\r\n     */\r\n    getOrigin(): WayPoint | undefined;\r\n    /**\r\n     * Sets the origin in the currently active flight plan.\r\n     * @param icao The ICAO designation of the origin airport.\r\n     * @param callback A callback to call when the operation has completed.\r\n     */\r\n    setOrigin(icao: string, callback?: () => void): Promise<void>;\r\n    /**\r\n     * Gets the index of the active waypoint in the flight plan.\r\n     * @param forceSimVarCall Unused\r\n     * @param useCorrection Unused\r\n     */\r\n    getActiveWaypointIndex(forceSimVarCall?: boolean, useCorrection?: boolean): number;\r\n    /**\r\n     * Sets the index of the active waypoint in the flight plan.\r\n     * @param index The index to make active in the flight plan.\r\n     * @param callback A callback to call when the operation has completed.\r\n     * @param fplnIndex The index of the flight plan\r\n     */\r\n    setActiveWaypointIndex(index: number, callback?: () => void, fplnIndex?: number): void;\r\n    /** Unknown */\r\n    recomputeActiveWaypointIndex(callback?: () => void): void;\r\n    /**\r\n     * Gets the index of the waypoint prior to the currently active waypoint.\r\n     * @param forceSimVarCall Unused\r\n     */\r\n    getPreviousActiveWaypoint(forceSimVarCall?: boolean): WayPoint;\r\n    /**\r\n     * Gets the ident of the active waypoint.\r\n     * @param forceSimVarCall Unused\r\n     */\r\n    getActiveWaypointIdent(forceSimVarCall?: boolean): string;\r\n    /**\r\n     * Gets the active waypoint index from fs9gps. Currently unimplemented.\r\n     * @param forceSimVarCall Unused\r\n     */\r\n    getGPSActiveWaypointIndex(forceSimVarCall?: boolean): number;\r\n    /**\r\n     * Gets the active waypoint.\r\n     * @param forceSimVarCall Unused\r\n     * @param useCorrection Unused\r\n     */\r\n    getActiveWaypoint(forceSimVarCall?: boolean, useCorrection?: boolean): WayPoint;\r\n    /**\r\n     * Gets the next waypoint following the active waypoint.\r\n     * @param forceSimVarCall Unused\r\n     */\r\n    getNextActiveWaypoint(forceSimVarCall?: boolean): WayPoint;\r\n    /**\r\n     * Gets the distance, in NM, to the active waypoint.\r\n     */\r\n    getDistanceToActiveWaypoint(): number;\r\n    /**\r\n     * Gets the bearing, in degrees, to the active waypoint.\r\n     */\r\n    getBearingToActiveWaypoint(): number;\r\n    /**\r\n     * Gets the estimated time enroute to the active waypoint.\r\n     */\r\n    getETEToActiveWaypoint(): number;\r\n    /**\r\n     * Gets the destination airfield of the current flight plan, if any.\r\n     */\r\n    getDestination(): WayPoint | undefined;\r\n    /**\r\n     * Gets the currently selected departure information for the current flight plan.\r\n     */\r\n    getDeparture(): any | undefined;\r\n    /**\r\n     * Gets the currently selected arrival information for the current flight plan.\r\n     */\r\n    getArrival(): any | undefined;\r\n    /**\r\n     * Gets the currently selected approach information for the current flight plan.\r\n     */\r\n    getAirportApproach(): any | undefined;\r\n    getApproachConstraints(): Promise<WayPoint[]>;\r\n    /**\r\n     * Gets the departure waypoints for the current flight plan.\r\n     */\r\n    getDepartureWaypoints(): WayPoint[];\r\n    /**\r\n     * Gets a map of the departure waypoints (?)\r\n     */\r\n    getDepartureWaypointsMap(): WayPoint[];\r\n    /**\r\n     * Gets the enroute waypoints for the current flight plan.\r\n     * @param outFPIndex An array of waypoint indexes to be pushed to.\r\n     */\r\n    getEnRouteWaypoints(outFPIndex: number[]): WayPoint[];\r\n    /**\r\n     * Gets the index of the last waypoint in the enroute segment of the current flight plan.\r\n     */\r\n    getEnRouteWaypointsLastIndex(): number;\r\n    /**\r\n     * Gets the arrival waypoints for the current flight plan.\r\n     */\r\n    getArrivalWaypoints(): WayPoint[];\r\n    /**\r\n     * Gets the arrival waypoints for the current flight plan as a map. (?)\r\n     */\r\n    getArrivalWaypointsMap(): WayPoint[];\r\n    /**\r\n     * Gets the waypoints for the current flight plan with altitude constraints.\r\n     */\r\n    getWaypointsWithAltitudeConstraints(): WayPoint[];\r\n    /**\r\n     * Gets the flight plan segment for a flight plan waypoint.\r\n     * @param waypoint The waypoint we want to find the segment for.\r\n     */\r\n    getSegmentFromWaypoint(waypoint: WayPoint | undefined): FlightPlanSegment;\r\n    /**\r\n     * Sets the destination for the current flight plan.\r\n     * @param icao The ICAO designation for the destination airfield.\r\n     * @param callback A callback to call once the operation completes.\r\n     */\r\n    setDestination(icao: string, callback?: () => void): Promise<void>;\r\n    /**\r\n     * Adds a waypoint to the current flight plan.\r\n     * @param icao The ICAO designation for the waypoint.\r\n     * @param index The index of the waypoint to add.\r\n     * @param callback A callback to call once the operation completes.\r\n     * @param setActive Whether or not to set the added waypoint as active immediately.\r\n     */\r\n    addWaypoint(icao: string, index?: number, callback?: () => void, setActive?: boolean): Promise<void>;\r\n    /**\r\n     * Adds a user waypoint to the current flight plan.\r\n     * @param waypoint The user waypoint to add.\r\n     * @param index The index to add the waypoint at in the flight plan.\r\n     * @param callback A callback to call once the operation completes.\r\n     */\r\n    addUserWaypoint(waypoint: WayPoint, index?: number, callback?: () => void): Promise<void>;\r\n    /**\r\n     * Sets the altitude for a waypoint in the current flight plan.\r\n     * @param altitude The altitude to set for the waypoint.\r\n     * @param index The index of the waypoint to set.\r\n     * @param callback A callback to call once the operation is complete.\r\n     */\r\n    setWaypointAltitude(altitude: number, index: number, callback?: () => void): void;\r\n    /**\r\n     * Sets additional data on a waypoint in the current flight plan.\r\n     * @param index The index of the waypoint to set additional data for.\r\n     * @param key The key of the data.\r\n     * @param value The value of the data.\r\n     * @param callback A callback to call once the operation is complete.\r\n     */\r\n    setWaypointAdditionalData(index: number, key: string, value: any, callback?: () => void): void;\r\n    /**\r\n     * Gets additional data on a waypoint in the current flight plan.\r\n     * @param index The index of the waypoint to set additional data for.\r\n     * @param key The key of the data.\r\n     * @param callback A callback to call with the value once the operation is complete.\r\n     */\r\n    getWaypointAdditionalData(index: number, key: string, callback?: (any: any) => void): void;\r\n    /**\r\n     * Reverses the currently active flight plan.\r\n     * @param {() => void} callback A callback to call when the operation is complete.\r\n     */\r\n    invertActiveFlightPlan(callback?: () => void): void;\r\n    /**\r\n     * Not sure what this is supposed to do.\r\n     * @param callback Stuff?\r\n     */\r\n    getApproachIfIcao(callback?: (any: any) => void): void;\r\n    /**\r\n     * Unused\r\n     * @param {*} _callback Unused\r\n     */\r\n    addFlightPlanUpdateCallback(_callback: any): void;\r\n    /**\r\n     * Adds a waypoint to the currently active flight plan by ident(?)\r\n     * @param ident The ident of the waypoint.\r\n     * @param index The index to add the waypoint at.\r\n     * @param callback A callback to call when the operation finishes.\r\n     */\r\n    addWaypointByIdent(ident: string, index: number, callback?: () => void): void;\r\n    /**\r\n     * Removes a waypoint from the currently active flight plan.\r\n     * @param index The index of the waypoint to remove.\r\n     * @param thenSetActive Unused\r\n     * @param callback A callback to call when the operation finishes.\r\n     */\r\n    removeWaypoint(index: number, thenSetActive?: boolean, callback?: () => void): void;\r\n    /**\r\n     * Gets the index of a given waypoint in the current flight plan.\r\n     * @param waypoint The waypoint to get the index of.\r\n     */\r\n    indexOfWaypoint(waypoint: WayPoint): number;\r\n    /**\r\n     * Gets the number of waypoints in a flight plan.\r\n     * @param flightPlanIndex The index of the flight plan. If omitted, will get the current flight plan.\r\n     */\r\n    getWaypointsCount(flightPlanIndex?: number): number;\r\n    /**\r\n     * Gets a count of the number of departure waypoints in the current flight plan.\r\n     */\r\n    getDepartureWaypointsCount(): number;\r\n    /**\r\n     * Gets a count of the number of arrival waypoints in the current flight plan.\r\n     */\r\n    getArrivalWaypointsCount(): number;\r\n    /**\r\n     * Gets a waypoint from a flight plan.\r\n     * @param index The index of the waypoint to get.\r\n     * @param flightPlanIndex The index of the flight plan to get the waypoint from. If omitted, will get from the current flight plan.\r\n     * @param considerApproachWaypoints Whether or not to consider approach waypoints.\r\n     */\r\n    getWaypoint(index: number, flightPlanIndex: number, considerApproachWaypoints: boolean): WayPoint;\r\n    /**\r\n     * Gets all non-approach waypoints from a flight plan.\r\n     * @param flightPlanIndex The index of the flight plan to get the waypoints from. If omitted, will get from the current flight plan.\r\n     */\r\n    getWaypoints(flightPlanIndex?: number): WayPoint[];\r\n    /**\r\n     * Gets all waypoints from a flight plan.\r\n     * @param flightPlanIndex The index of the flight plan to get the waypoints from. If omitted, will get from the current flight plan.\r\n     */\r\n    getAllWaypoints(flightPlanIndex?: number): WayPoint[];\r\n    /**\r\n     * Gets the index of the departure runway in the current flight plan.\r\n     */\r\n    getDepartureRunwayIndex(): number;\r\n    /**\r\n     * Gets the string value of the departure runway in the current flight plan.\r\n     */\r\n    getDepartureRunway(): OneWayRunway;\r\n    /**\r\n     * Gets the heading of the selected departure runway.\r\n     */\r\n    getDepartureRunwayDirection(): Number;\r\n    /**\r\n     * Gets the best runway based on the current plane heading.\r\n     */\r\n    getDetectedCurrentRunway(): OneWayRunway;\r\n    /**\r\n     * Gets the departure procedure index for the current flight plan.\r\n     */\r\n    getDepartureProcIndex(): number;\r\n    /**\r\n     * Sets the departure procedure index for the current flight plan.\r\n     * @param index The index of the departure procedure in the origin airport departures information.\r\n     * @param callback A callback to call when the operation completes.\r\n     */\r\n    setDepartureProcIndex(index: number, callback?: () => void): Promise<void>;\r\n    /**\r\n     * Sets the departure runway index for the current flight plan.\r\n     * @param index The index of the runway in the origin airport runway information.\r\n     * @param callback A callback to call when the operation completes.\r\n     */\r\n    setDepartureRunwayIndex(index: number, callback?: () => void): Promise<void>;\r\n    /**\r\n     * Sets the origin runway index for the current flight plan.\r\n     * @param index The index of the runway in the origin airport runway information.\r\n     * @param callback A callback to call when the operation completes.\r\n     */\r\n    setOriginRunwayIndex(index: number, callback?: () => void): Promise<void>;\r\n    /**\r\n     * Gets the departure transition index for the current flight plan.\r\n     */\r\n    getDepartureEnRouteTransitionIndex(): number;\r\n    /**\r\n     * Sets the departure transition index for the current flight plan.\r\n     * @param index The index of the departure transition to select.\r\n     * @param callback A callback to call when the operation completes.\r\n     */\r\n    setDepartureEnRouteTransitionIndex(index: number, callback?: () => void): Promise<void>;\r\n    /**\r\n     * Unused\r\n     */\r\n    getDepartureDiscontinuity(): void;\r\n    /**\r\n     * Unused\r\n     * @param callback A callback to call when the operation completes.\r\n     */\r\n    clearDepartureDiscontinuity(callback?: () => void): void;\r\n    /**\r\n     * Removes the departure from the currently active flight plan.\r\n     * @param callback A callback to call when the operation completes.\r\n     */\r\n    removeDeparture(callback?: () => void): Promise<void>;\r\n    /**\r\n     * Gets the arrival procedure index in the currenly active flight plan.\r\n     */\r\n    getArrivalProcIndex(): number;\r\n    /**\r\n     * Gets the arrival transition procedure index in the currently active flight plan.\r\n     */\r\n    getArrivalTransitionIndex(): number;\r\n    /**\r\n     * Sets the arrival procedure index for the current flight plan.\r\n     * @param {Number} index The index of the arrival procedure to select.\r\n     * @param {() => void} callback A callback to call when the operation completes.\r\n     */\r\n    setArrivalProcIndex(index: any, callback?: () => void): Promise<void>;\r\n    /**\r\n     * Unused\r\n     */\r\n    getArrivalDiscontinuity(): void;\r\n    /**\r\n     * Unused\r\n     * @param {*} callback\r\n     */\r\n    clearArrivalDiscontinuity(callback?: () => void): void;\r\n    /**\r\n     * Clears a discontinuity from the end of a waypoint.\r\n     * @param index\r\n     */\r\n    clearDiscontinuity(index: number): void;\r\n    /**\r\n     * Sets the arrival transition index for the current flight plan.\r\n     * @param {Number} index The index of the arrival transition to select.\r\n     * @param {() => void} callback A callback to call when the operation completes.\r\n     */\r\n    setArrivalEnRouteTransitionIndex(index: any, callback?: () => void): Promise<void>;\r\n    /**\r\n     * Sets the arrival runway index in the currently active flight plan.\r\n     * @param {Number} index The index of the runway to select.\r\n     * @param {() => void} callback A callback to call when the operation completes.\r\n     */\r\n    setArrivalRunwayIndex(index: any, callback?: () => void): Promise<void>;\r\n    /**\r\n     * Sets the destination runway index in the currently active flight plan.\r\n     * @param index The index of the runway to select.\r\n     * @param runwayExtension The length of the runway extension fix to create, or -1 if none.\r\n     * @param callback A callback to call when the operation completes.\r\n     */\r\n    setDestinationRunwayIndex(index: number, runwayExtension?: number, callback?: () => void): Promise<void>;\r\n    /**\r\n     * Gets the index of the approach in the currently active flight plan.\r\n     */\r\n    getApproachIndex(): number;\r\n    /**\r\n     * Sets the approach index in the currently active flight plan.\r\n     * @param index The index of the approach in the destination airport information.\r\n     * @param callback A callback to call when the operation has completed.\r\n     * @param transition The approach transition index to set in the approach information.\r\n     */\r\n    setApproachIndex(index: number, callback?: () => void, transition?: number): Promise<void>;\r\n    /**\r\n     * Whether or not an approach is loaded in the current flight plan.\r\n     * @param forceSimVarCall Unused\r\n     */\r\n    isLoadedApproach(forceSimVarCall?: boolean): boolean;\r\n    /**\r\n     * Whether or not the approach is active in the current flight plan.\r\n     * @param forceSimVarCall Unused\r\n     */\r\n    isActiveApproach(forceSimVarCall?: boolean): boolean;\r\n    /**\r\n     * Activates the approach segment in the current flight plan.\r\n     * @param {() => void} callback\r\n     */\r\n    activateApproach(callback?: () => void): Promise<void>;\r\n    /**\r\n     * Deactivates the approach segments in the current flight plan.\r\n     */\r\n    deactivateApproach(): void;\r\n    /**\r\n     * Attemptes to auto-activate the approach in the current flight plan.\r\n     */\r\n    tryAutoActivateApproach(): void;\r\n    /**\r\n     * Returns a value indicating if we are in a approach/arrival segment.\r\n     */\r\n    isApproachActivated(): boolean;\r\n    /**\r\n     * Gets the index of the active waypoint on the approach in the current flight plan.\r\n     */\r\n    getApproachActiveWaypointIndex(): number;\r\n    /**\r\n     * Gets the approach procedure from the current flight plan destination airport procedure information.\r\n     */\r\n    getApproach(): any;\r\n    /**\r\n     * Get the nav frequency for the selected approach in the current flight plan.\r\n     * @returns The approach nav frequency, if an ILS approach.\r\n     */\r\n    getApproachNavFrequency(): number;\r\n    /**\r\n     * Gets the index of the approach transition in the current flight plan.\r\n     */\r\n    getApproachTransitionIndex(): number;\r\n    /**\r\n     * Gets the last waypoint index before the start of the approach segment in\r\n     * the current flight plan.\r\n     */\r\n    getLastIndexBeforeApproach(): number;\r\n    /**\r\n     * Gets the approach runway from the current flight plan.\r\n     */\r\n    getApproachRunway(): OneWayRunway;\r\n    /**\r\n     * Gets the approach waypoints for the current flight plan.\r\n     * @param fpIndex The flight plan index.\r\n     */\r\n    getApproachWaypoints(fpIndex?: number): WayPoint[];\r\n    /**\r\n     * Sets the approach transition index for the current flight plan.\r\n     * @param index The index of the transition in the destination airport approach information.\r\n     * @param callback A callback to call when the operation completes.\r\n     */\r\n    setApproachTransitionIndex(index: number, callback?: () => void): Promise<void>;\r\n    /**\r\n     * Removes the arrival segment from the current flight plan.\r\n     * @param callback A callback to call when the operation completes.\r\n     */\r\n    removeArrival(callback?: () => void): Promise<void>;\r\n    /**\r\n     * Activates direct-to an ICAO designated fix.\r\n     * @param icao The ICAO designation for the fix to fly direct-to.\r\n     * @param callback A callback to call when the operation completes.\r\n     */\r\n    activateDirectTo(icao: string, callback?: () => void): Promise<void>;\r\n    /**\r\n     * Activates direct-to an existing waypoint in the flight plan.\r\n     * @param waypointIndex The index of the waypoint.\r\n     * @param callback A callback to call when the operation completes.\r\n     */\r\n    activateDirectToByIndex(waypointIndex: number, callback?: () => void): Promise<void>;\r\n    /**\r\n     * Cancels the current direct-to and proceeds back along the flight plan.\r\n     * @param callback A callback to call when the operation completes.\r\n     */\r\n    cancelDirectTo(callback?: () => void): void;\r\n    /**\r\n     * Gets whether or not the flight plan is current in a direct-to procedure.\r\n     */\r\n    getIsDirectTo(): boolean;\r\n    /**\r\n     * Gets the target of the direct-to procedure in the current flight plan.\r\n     */\r\n    getDirectToTarget(): WayPoint;\r\n    /**\r\n     * Gets the origin/start waypoint of the direct-to procedure in the current flight plan.\r\n     */\r\n    getDirecToOrigin(): WayPoint;\r\n    getCoordinatesHeadingAtDistanceAlongFlightPlan(distance: any): void;\r\n    /**\r\n     * Adds a hold at the specified waypoint index in the flight plan.\r\n     * @param index The waypoint index to hold at.\r\n     * @param details The details of the hold to execute.\r\n     */\r\n    addHoldAtWaypointIndex(index: number, details: HoldDetails): Promise<void>;\r\n    /**\r\n     * Modifies a hold at the specified waypoint index in the flight plan.\r\n     * @param index The waypoint index to hold at.\r\n     * @param details The details of the hold to execute.\r\n     */\r\n    modifyHoldDetails(index: number, details: HoldDetails): Promise<void>;\r\n    /**\r\n     * Deletes a hold at the specified waypoint index in the flight plan.\r\n     * @param index The waypoint index to delete the hold at.\r\n     */\r\n    deleteHoldAtWaypointIndex(index: number): Promise<void>;\r\n    /**\r\n     * Gets the coordinates of a point that is a specific distance from the destination along the flight plan.\r\n     * @param distance The distance from destination we want the coordinates for.\r\n     */\r\n    getCoordinatesAtNMFromDestinationAlongFlightPlan(distance: number): LatLongAlt;\r\n    /**\r\n     * Gets the current stored flight plan\r\n     */\r\n    _getFlightPlan(): void;\r\n    getCurrentFlightPlan(): ManagedFlightPlan;\r\n    getFlightPlan(index: any): ManagedFlightPlan;\r\n    /**\r\n     * Updates the synchronized flight plan version and saves it to shared storage.\r\n     */\r\n    _updateFlightPlanVersion(): Promise<void>;\r\n    pauseSync(): void;\r\n    resumeSync(): void;\r\n}\r\n"}}
