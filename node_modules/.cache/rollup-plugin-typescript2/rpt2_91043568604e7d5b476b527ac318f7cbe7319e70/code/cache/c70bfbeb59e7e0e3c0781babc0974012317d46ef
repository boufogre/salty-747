{"code":"import { GeoMath } from \"./GeoMath\";\r\n/**\r\n * Creating a new waypoint to be added to a flight plan.\r\n */\r\nexport class WaypointBuilder {\r\n    /**\r\n     * Builds a WayPoint from basic data.\r\n     * @param ident The ident of the waypoint to be created.\r\n     * @param coordinates The coordinates of the waypoint.\r\n     * @param instrument The base instrument instance.\r\n     * @returns The built waypoint.\r\n     */\r\n    static fromCoordinates(ident, coordinates, instrument) {\r\n        const waypoint = new WayPoint(instrument);\r\n        waypoint.type = 'W';\r\n        waypoint.infos = new IntersectionInfo(instrument);\r\n        waypoint.infos.coordinates = coordinates;\r\n        waypoint.ident = ident;\r\n        waypoint.infos.ident = ident;\r\n        return waypoint;\r\n    }\r\n    /**\r\n     * Builds a WayPoint from a refrence waypoint.\r\n     * @param ident The ident of the waypoint to be created.\r\n     * @param placeCoordinates The coordinates of the reference waypoint.\r\n     * @param bearing The magnetic bearing from the reference waypoint.\r\n     * @param distance The distance from the reference waypoint.\r\n     * @param instrument The base instrument instance.\r\n     * @returns The built waypoint.\r\n     */\r\n    static fromPlaceBearingDistance(ident, placeCoordinates, bearing, distance, instrument) {\r\n        const magvar = GeoMath.getMagvar(placeCoordinates.lat, placeCoordinates.long);\r\n        let trueBearing = GeoMath.removeMagvar(bearing, magvar);\r\n        trueBearing = trueBearing < 0 ? 360 + trueBearing : trueBearing > 360 ? trueBearing - 360 : trueBearing;\r\n        const coordinates = Avionics.Utils.bearingDistanceToCoordinates(trueBearing, distance, placeCoordinates.lat, placeCoordinates.long);\r\n        return WaypointBuilder.fromCoordinates(ident, coordinates, instrument);\r\n    }\r\n    /**\r\n     * Builds a WayPoint at a distance from an existing waypoint along the flight plan.\r\n     * @param ident The ident of the waypoint to be created.\r\n     * @param placeIndex The index of the reference waypoint in the flight plan.\r\n     * @param distance The distance from the reference waypoint.\r\n     * @param instrument The base instrument instance.\r\n     * @param fpm The flightplanmanager instance.\r\n     * @returns The built waypoint.\r\n     */\r\n    static fromPlaceAlongFlightPlan(ident, placeIndex, distance, instrument, fpm) {\r\n        console.log(\"running fromPlaceAlongFlightPlan\");\r\n        console.log(\"destination? \" + fpm.getDestination() ? \"True\" : \"False\");\r\n        const destinationDistanceInFlightplan = fpm.getDestination().cumulativeDistanceInFP;\r\n        console.log(\"destinationDistanceInFlightplan \" + destinationDistanceInFlightplan);\r\n        const placeDistanceFromDestination = fpm.getWaypoint(placeIndex, NaN, true).cumulativeDistanceInFP;\r\n        console.log(\"placeDistanceFromDestination \" + placeDistanceFromDestination);\r\n        const distanceFromDestination = destinationDistanceInFlightplan - placeDistanceFromDestination - distance;\r\n        console.log(\"distanceFromDestination \" + distanceFromDestination);\r\n        const coordinates = fpm.getCoordinatesAtNMFromDestinationAlongFlightPlan(distanceFromDestination);\r\n        return WaypointBuilder.fromCoordinates(ident, coordinates, instrument);\r\n    }\r\n}\r\n//# sourceMappingURL=WaypointBuilder.js.map","references":["D:/Documents/GitHub/boufogre/salty-747/src/fpm/src/flightplanning/FlightPlanManager.ts","D:/Documents/GitHub/boufogre/salty-747/src/fpm/src/flightplanning/GeoMath.ts"],"map":"{\"version\":3,\"file\":\"WaypointBuilder.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/fpm/src/flightplanning/WaypointBuilder.ts\"],\"names\":[],\"mappings\":\"AACA,OAAO,EAAE,OAAO,EAAE,MAAM,WAAW,CAAC;AAEpC;;GAEG;AACH,MAAM,OAAO,eAAe;IAG1B;;;;;;OAMG;IACI,MAAM,CAAC,eAAe,CAAC,KAAa,EAAE,WAAuB,EAAE,UAA0B;QAC9F,MAAM,QAAQ,GAAG,IAAI,QAAQ,CAAC,UAAU,CAAC,CAAC;QAC1C,QAAQ,CAAC,IAAI,GAAG,GAAG,CAAC;QAEpB,QAAQ,CAAC,KAAK,GAAG,IAAI,gBAAgB,CAAC,UAAU,CAAC,CAAC;QAClD,QAAQ,CAAC,KAAK,CAAC,WAAW,GAAG,WAAW,CAAC;QAEzC,QAAQ,CAAC,KAAK,GAAG,KAAK,CAAC;QACvB,QAAQ,CAAC,KAAK,CAAC,KAAK,GAAG,KAAK,CAAC;QAE7B,OAAO,QAAQ,CAAC;IAClB,CAAC;IAED;;;;;;;;OAQG;IACI,MAAM,CAAC,wBAAwB,CAAC,KAAa,EAAE,gBAA4B,EAAE,OAAe,EAAE,QAAgB,EAAE,UAA0B;QAE/I,MAAM,MAAM,GAAG,OAAO,CAAC,SAAS,CAAC,gBAAgB,CAAC,GAAG,EAAE,gBAAgB,CAAC,IAAI,CAAC,CAAC;QAC9E,IAAI,WAAW,GAAG,OAAO,CAAC,YAAY,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;QACxD,WAAW,GAAG,WAAW,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,WAAW,CAAC,CAAC,CAAC,WAAW,GAAG,GAAG,CAAC,CAAC,CAAC,WAAW,GAAG,GAAG,CAAC,CAAC,CAAC,WAAW,CAAC;QACxG,MAAM,WAAW,GAAG,QAAQ,CAAC,KAAK,CAAC,4BAA4B,CAAC,WAAW,EAAE,QAAQ,EAAE,gBAAgB,CAAC,GAAG,EAAE,gBAAgB,CAAC,IAAI,CAAC,CAAC;QAEpI,OAAO,eAAe,CAAC,eAAe,CAAC,KAAK,EAAE,WAAW,EAAE,UAAU,CAAC,CAAC;IACzE,CAAC;IAED;;;;;;;;OAQG;IACI,MAAM,CAAC,wBAAwB,CAAC,KAAa,EAAE,UAAkB,EAAE,QAAgB,EAAE,UAA0B,EAAE,GAAsB;QAC5I,OAAO,CAAC,GAAG,CAAC,kCAAkC,CAAC,CAAC;QAChD,OAAO,CAAC,GAAG,CAAC,eAAe,GAAG,GAAG,CAAC,cAAc,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC;QACvE,MAAM,+BAA+B,GAAG,GAAG,CAAC,cAAc,EAAE,CAAC,sBAAsB,CAAC;QACpF,OAAO,CAAC,GAAG,CAAC,kCAAkC,GAAG,+BAA+B,CAAC,CAAC;QAElF,MAAM,4BAA4B,GAAG,GAAG,CAAC,WAAW,CAAC,UAAU,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC,sBAAsB,CAAC;QACnG,OAAO,CAAC,GAAG,CAAC,+BAA+B,GAAG,4BAA4B,CAAC,CAAC;QAE5E,MAAM,uBAAuB,GAAG,+BAA+B,GAAG,4BAA4B,GAAG,QAAQ,CAAC;QAC1G,OAAO,CAAC,GAAG,CAAC,0BAA0B,GAAG,uBAAuB,CAAC,CAAC;QAGlE,MAAM,WAAW,GAAG,GAAG,CAAC,gDAAgD,CAAC,uBAAuB,CAAC,CAAC;QAElG,OAAO,eAAe,CAAC,eAAe,CAAC,KAAK,EAAE,WAAW,EAAE,UAAU,CAAC,CAAC;IACzE,CAAC;CAEF\"}","dts":{"name":"D:/Documents/GitHub/boufogre/salty-747/src/fpm/dist/types/flightplanning/WaypointBuilder.d.ts","writeByteOrderMark":false,"text":"import { FlightPlanManager } from \"./FlightPlanManager\";\r\n/**\r\n * Creating a new waypoint to be added to a flight plan.\r\n */\r\nexport declare class WaypointBuilder {\r\n    /**\r\n     * Builds a WayPoint from basic data.\r\n     * @param ident The ident of the waypoint to be created.\r\n     * @param coordinates The coordinates of the waypoint.\r\n     * @param instrument The base instrument instance.\r\n     * @returns The built waypoint.\r\n     */\r\n    static fromCoordinates(ident: string, coordinates: LatLongAlt, instrument: BaseInstrument): WayPoint;\r\n    /**\r\n     * Builds a WayPoint from a refrence waypoint.\r\n     * @param ident The ident of the waypoint to be created.\r\n     * @param placeCoordinates The coordinates of the reference waypoint.\r\n     * @param bearing The magnetic bearing from the reference waypoint.\r\n     * @param distance The distance from the reference waypoint.\r\n     * @param instrument The base instrument instance.\r\n     * @returns The built waypoint.\r\n     */\r\n    static fromPlaceBearingDistance(ident: string, placeCoordinates: LatLongAlt, bearing: number, distance: number, instrument: BaseInstrument): WayPoint;\r\n    /**\r\n     * Builds a WayPoint at a distance from an existing waypoint along the flight plan.\r\n     * @param ident The ident of the waypoint to be created.\r\n     * @param placeIndex The index of the reference waypoint in the flight plan.\r\n     * @param distance The distance from the reference waypoint.\r\n     * @param instrument The base instrument instance.\r\n     * @param fpm The flightplanmanager instance.\r\n     * @returns The built waypoint.\r\n     */\r\n    static fromPlaceAlongFlightPlan(ident: string, placeIndex: number, distance: number, instrument: BaseInstrument, fpm: FlightPlanManager): WayPoint;\r\n}\r\n"}}
