{"code":"export class CJ4_SpeedObserver {\r\n    /**\r\n     *\r\n     */\r\n    constructor(_fpm) {\r\n        this._fpm = _fpm;\r\n        this._fpChecksum = 0;\r\n        this._currentSpeedRestriction = 0;\r\n        this._vnavDescentIas = 290;\r\n    }\r\n    update() {\r\n        if (this._fpChecksum !== this._fpm.getFlightPlan(0).checksum) {\r\n            this.updateSpeedProfile();\r\n            this._vnavDescentIas = WTDataStore.get('CJ4_vnavDescentIas', 290);\r\n            this._fpChecksum = this._fpm.getFlightPlan(0).checksum;\r\n        }\r\n        this.observeSpeed();\r\n    }\r\n    /** Observes the current speed restriction */\r\n    observeSpeed() {\r\n        // check if vnav is on\r\n        const isVnavOn = SimVar.GetSimVarValue(\"L:WT_CJ4_VNAV_ON\", \"number\") == 1;\r\n        if (isVnavOn) {\r\n            this._currentSpeedRestriction = this._speedProfile[this._fpm.getActiveWaypointIndex()];\r\n            // TODO if VPATH is active check for descent target speed\r\n        }\r\n    }\r\n    /** Looks back in the flight plan to build an array of speed restrictions for each leg */\r\n    updateSpeedProfile() {\r\n        // ...\r\n        this._speedProfile = new Array(this._fpm.getFlightPlan(0).waypoints.length).fill(999);\r\n        const wpts = this._fpm.getFlightPlan(0).waypoints;\r\n        let activeRestriction = 999;\r\n        for (let i = 0; i < wpts.length; i++) {\r\n            const wpt = wpts[i];\r\n            let constraint = wpt.speedConstraint;\r\n            if (constraint === -1) {\r\n                constraint = 999;\r\n            }\r\n            if (constraint !== 999 && constraint !== activeRestriction) {\r\n                activeRestriction = constraint;\r\n            }\r\n            this._speedProfile[i] = activeRestriction;\r\n        }\r\n    }\r\n}\r\n//# sourceMappingURL=CJ4_SpeedObserver.js.map","references":["D:/Documents/GitHub/boufogre/salty-747/src/fpm/src/flightplanning/FlightPlanManager.ts"],"map":"{\"version\":3,\"file\":\"CJ4_SpeedObserver.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/fpm/src/cj4/CJ4_SpeedObserver.ts\"],\"names\":[],\"mappings\":\"AAEA,MAAM,OAAO,iBAAiB;IAM5B;;OAEG;IACH,YAAoB,IAAuB;QAAvB,SAAI,GAAJ,IAAI,CAAmB;QARnC,gBAAW,GAAW,CAAC,CAAC;QACxB,6BAAwB,GAAG,CAAC,CAAC;QAE7B,oBAAe,GAAG,GAAG,CAAC;IAO9B,CAAC;IAED,MAAM;QACJ,IAAI,IAAI,CAAC,WAAW,KAAK,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE;YAC5D,IAAI,CAAC,kBAAkB,EAAE,CAAC;YAC1B,IAAI,CAAC,eAAe,GAAG,WAAW,CAAC,GAAG,CAAC,oBAAoB,EAAE,GAAG,CAAC,CAAC;YAClE,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC;SACxD;QAED,IAAI,CAAC,YAAY,EAAE,CAAC;IACtB,CAAC;IAED,6CAA6C;IAC7C,YAAY;QACV,sBAAsB;QACtB,MAAM,QAAQ,GAAG,MAAM,CAAC,cAAc,CAAC,kBAAkB,EAAE,QAAQ,CAAC,IAAI,CAAC,CAAC;QAE1E,IAAI,QAAQ,EAAE;YACZ,IAAI,CAAC,wBAAwB,GAAG,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,sBAAsB,EAAE,CAAC,CAAC;YAEvF,yDAAyD;SAC1D;IACH,CAAC;IAED,yFAAyF;IACzF,kBAAkB;QAChB,MAAM;QACN,IAAI,CAAC,aAAa,GAAG,IAAI,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACtF,MAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;QAClD,IAAI,iBAAiB,GAAG,GAAG,CAAC;QAE5B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACpC,MAAM,GAAG,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;YACpB,IAAI,UAAU,GAAG,GAAG,CAAC,eAAe,CAAC;YACrC,IAAI,UAAU,KAAK,CAAC,CAAC,EAAE;gBACrB,UAAU,GAAG,GAAG,CAAC;aAClB;YACD,IAAI,UAAU,KAAK,GAAG,IAAI,UAAU,KAAK,iBAAiB,EAAE;gBAC1D,iBAAiB,GAAG,UAAU,CAAC;aAChC;YACD,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,GAAG,iBAAiB,CAAC;SAC3C;IACH,CAAC;CAEF\"}","dts":{"name":"D:/Documents/GitHub/boufogre/salty-747/src/fpm/dist/types/cj4/CJ4_SpeedObserver.d.ts","writeByteOrderMark":false,"text":"import { FlightPlanManager } from \"../flightplanning/FlightPlanManager\";\r\nexport declare class CJ4_SpeedObserver {\r\n    private _fpm;\r\n    private _fpChecksum;\r\n    private _currentSpeedRestriction;\r\n    private _speedProfile;\r\n    private _vnavDescentIas;\r\n    /**\r\n     *\r\n     */\r\n    constructor(_fpm: FlightPlanManager);\r\n    update(): void;\r\n    /** Observes the current speed restriction */\r\n    observeSpeed(): void;\r\n    /** Looks back in the flight plan to build an array of speed restrictions for each leg */\r\n    updateSpeedProfile(): void;\r\n}\r\n"}}
