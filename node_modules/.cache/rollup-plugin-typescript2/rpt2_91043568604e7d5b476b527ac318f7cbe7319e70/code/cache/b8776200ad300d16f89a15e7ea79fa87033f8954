{"code":"import { WorldMagneticModel } from \"./WorldMagneticModel\";\r\n/** A class for geographical mathematics. */\r\nexport class GeoMath {\r\n    /**\r\n     * Gets coordinates at a relative bearing and distance from a set of coordinates.\r\n     * @param course The course, in degrees, from the reference coordinates.\r\n     * @param distanceInNM The distance, in nautical miles, from the reference coordinates.\r\n     * @param referenceCoordinates The reference coordinates to calculate from.\r\n     * @returns The calculated coordinates.\r\n     */\r\n    static relativeBearingDistanceToCoords(course, distanceInNM, referenceCoordinates) {\r\n        const courseRadians = course * Avionics.Utils.DEG2RAD;\r\n        const distanceRadians = (Math.PI / (180 * 60)) * distanceInNM;\r\n        const refLat = referenceCoordinates.lat * Avionics.Utils.DEG2RAD;\r\n        const refLon = -(referenceCoordinates.long * Avionics.Utils.DEG2RAD);\r\n        const lat = Math.asin(Math.sin(refLat) * Math.cos(distanceRadians) + Math.cos(refLat) * Math.sin(distanceRadians) * Math.cos(courseRadians));\r\n        const dlon = Math.atan2(Math.sin(courseRadians) * Math.sin(distanceRadians) * Math.cos(refLat), Math.cos(distanceRadians) - Math.sin(refLat) * Math.sin(lat));\r\n        const lon = Avionics.Utils.fmod(refLon - dlon + Math.PI, 2 * Math.PI) - Math.PI;\r\n        return new LatLongAlt(lat * Avionics.Utils.RAD2DEG, -(lon * Avionics.Utils.RAD2DEG));\r\n    }\r\n    /**\r\n     * Gets a magnetic heading given a true course and a magnetic variation.\r\n     * @param trueCourse The true course to correct.\r\n     * @param magneticVariation The measured magnetic variation.\r\n     * @returns The magnetic heading, corrected for magnetic variation.\r\n     */\r\n    static correctMagvar(trueCourse, magneticVariation) {\r\n        return trueCourse - GeoMath.normalizeMagVar(magneticVariation);\r\n    }\r\n    /**\r\n     * Gets a true course given a magnetic heading and a magnetic variation.\r\n     * @param headingMagnetic The magnetic heading to correct.\r\n     * @param magneticVariation The measured magnetic variation.\r\n     * @returns The true course, corrected for magnetic variation.\r\n     */\r\n    static removeMagvar(headingMagnetic, magneticVariation) {\r\n        return headingMagnetic + GeoMath.normalizeMagVar(magneticVariation);\r\n    }\r\n    /**\r\n     * Gets a magnetic variation difference in 0-360 degrees.\r\n     * @param magneticVariation The magnetic variation to normalize.\r\n     * @returns A normalized magnetic variation.\r\n     */\r\n    static normalizeMagVar(magneticVariation) {\r\n        let normalizedMagVar;\r\n        if (magneticVariation <= 180) {\r\n            normalizedMagVar = magneticVariation;\r\n        }\r\n        else {\r\n            normalizedMagVar = magneticVariation - 360;\r\n        }\r\n        return normalizedMagVar;\r\n    }\r\n    /**\r\n     * Gets the magnetic variation for a given latitude and longitude.\r\n     * @param lat The latitude to get a magvar for.\r\n     * @param lon The longitude to get a magvar for.\r\n     * @returns The magnetic variation at the specific latitude and longitude.\r\n     */\r\n    static getMagvar(lat, lon) {\r\n        return GeoMath.magneticModel.declination(0, lat, lon, 2020);\r\n    }\r\n}\r\nGeoMath.magneticModel = new WorldMagneticModel();\r\n//# sourceMappingURL=GeoMath.js.map","references":["D:/Documents/GitHub/boufogre/salty-747/src/fpm/src/flightplanning/WorldMagneticModel.ts"],"map":"{\"version\":3,\"file\":\"GeoMath.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/fpm/src/flightplanning/GeoMath.ts\"],\"names\":[],\"mappings\":\"AAAA,OAAO,EAAE,kBAAkB,EAAE,MAAM,sBAAsB,CAAC;AAE1D,4CAA4C;AAC5C,MAAM,OAAO,OAAO;IAIlB;;;;;;OAMG;IACI,MAAM,CAAC,+BAA+B,CAAC,MAAc,EAAE,YAAoB,EAAE,oBAAgC;QAClH,MAAM,aAAa,GAAG,MAAM,GAAG,QAAQ,CAAC,KAAK,CAAC,OAAO,CAAC;QACtD,MAAM,eAAe,GAAG,CAAC,IAAI,CAAC,EAAE,GAAG,CAAC,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,YAAY,CAAC;QAE9D,MAAM,MAAM,GAAG,oBAAoB,CAAC,GAAG,GAAG,QAAQ,CAAC,KAAK,CAAC,OAAO,CAAC;QACjE,MAAM,MAAM,GAAG,CAAC,CAAC,oBAAoB,CAAC,IAAI,GAAG,QAAQ,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;QAErE,MAAM,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,eAAe,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,eAAe,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC,CAAC;QAC7I,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,eAAe,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,eAAe,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;QAC9J,MAAM,GAAG,GAAG,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,GAAG,IAAI,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC,GAAG,IAAI,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,EAAE,CAAC;QAEhF,OAAO,IAAI,UAAU,CAAC,GAAG,GAAG,QAAQ,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC,GAAG,GAAG,QAAQ,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC;IACvF,CAAC;IAED;;;;;OAKG;IACI,MAAM,CAAC,aAAa,CAAC,UAAkB,EAAE,iBAAyB;QACvE,OAAO,UAAU,GAAG,OAAO,CAAC,eAAe,CAAC,iBAAiB,CAAC,CAAC;IACjE,CAAC;IAED;;;;;OAKG;IACI,MAAM,CAAC,YAAY,CAAC,eAAuB,EAAE,iBAAyB;QAC3E,OAAO,eAAe,GAAG,OAAO,CAAC,eAAe,CAAC,iBAAiB,CAAC,CAAC;IACtE,CAAC;IAED;;;;OAIG;IACK,MAAM,CAAC,eAAe,CAAC,iBAAyB;QACtD,IAAI,gBAAwB,CAAC;QAC7B,IAAI,iBAAiB,IAAI,GAAG,EAAE;YAC5B,gBAAgB,GAAG,iBAAiB,CAAC;SACtC;aACI;YACH,gBAAgB,GAAG,iBAAiB,GAAG,GAAG,CAAC;SAC5C;QAED,OAAO,gBAAgB,CAAC;IAC1B,CAAC;IAED;;;;;OAKG;IACI,MAAM,CAAC,SAAS,CAAC,GAAW,EAAE,GAAW;QAC9C,OAAO,OAAO,CAAC,aAAa,CAAC,WAAW,CAAC,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC;IAC9D,CAAC;;AApEc,qBAAa,GAAG,IAAI,kBAAkB,EAAE,CAAC\"}","dts":{"name":"D:/Documents/GitHub/boufogre/salty-747/src/fpm/dist/types/flightplanning/GeoMath.d.ts","writeByteOrderMark":false,"text":"/** A class for geographical mathematics. */\r\nexport declare class GeoMath {\r\n    private static magneticModel;\r\n    /**\r\n     * Gets coordinates at a relative bearing and distance from a set of coordinates.\r\n     * @param course The course, in degrees, from the reference coordinates.\r\n     * @param distanceInNM The distance, in nautical miles, from the reference coordinates.\r\n     * @param referenceCoordinates The reference coordinates to calculate from.\r\n     * @returns The calculated coordinates.\r\n     */\r\n    static relativeBearingDistanceToCoords(course: number, distanceInNM: number, referenceCoordinates: LatLongAlt): LatLongAlt;\r\n    /**\r\n     * Gets a magnetic heading given a true course and a magnetic variation.\r\n     * @param trueCourse The true course to correct.\r\n     * @param magneticVariation The measured magnetic variation.\r\n     * @returns The magnetic heading, corrected for magnetic variation.\r\n     */\r\n    static correctMagvar(trueCourse: number, magneticVariation: number): number;\r\n    /**\r\n     * Gets a true course given a magnetic heading and a magnetic variation.\r\n     * @param headingMagnetic The magnetic heading to correct.\r\n     * @param magneticVariation The measured magnetic variation.\r\n     * @returns The true course, corrected for magnetic variation.\r\n     */\r\n    static removeMagvar(headingMagnetic: number, magneticVariation: number): number;\r\n    /**\r\n     * Gets a magnetic variation difference in 0-360 degrees.\r\n     * @param magneticVariation The magnetic variation to normalize.\r\n     * @returns A normalized magnetic variation.\r\n     */\r\n    private static normalizeMagVar;\r\n    /**\r\n     * Gets the magnetic variation for a given latitude and longitude.\r\n     * @param lat The latitude to get a magvar for.\r\n     * @param lon The longitude to get a magvar for.\r\n     * @returns The magnetic variation at the specific latitude and longitude.\r\n     */\r\n    static getMagvar(lat: number, lon: number): number;\r\n}\r\n"}}
