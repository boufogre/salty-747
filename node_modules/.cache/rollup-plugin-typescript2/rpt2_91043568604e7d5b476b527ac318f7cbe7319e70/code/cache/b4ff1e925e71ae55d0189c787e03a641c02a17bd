{"code":"/**\r\n * Details of a hold procedure for a fix.\r\n */\r\nexport class HoldDetails {\r\n    /**\r\n     * Creates a default set of hold details.\r\n     * @param course The course to create the hold details for.\r\n     * @param courseTowardsHoldFix The course to the hold fix.\r\n     * @returns A new set of hold details.\r\n     */\r\n    static createDefault(course, courseTowardsHoldFix) {\r\n        const details = new HoldDetails();\r\n        details.holdCourse = course;\r\n        details.holdSpeedType = HoldSpeedType.FAA;\r\n        details.legTime = 60;\r\n        details.speed = Math.max(Simplane.getGroundSpeed(), 140);\r\n        details.windDirection = SimVar.GetSimVarValue(\"AMBIENT WIND DIRECTION\", \"degrees\");\r\n        details.windSpeed = SimVar.GetSimVarValue(\"AMBIENT WIND VELOCITY\", \"knots\");\r\n        details.legDistance = details.legTime * (details.speed / 3600);\r\n        details.turnDirection = HoldTurnDirection.Right;\r\n        details.state = HoldState.None;\r\n        details.entryType = HoldDetails.calculateEntryType(course, courseTowardsHoldFix, details.turnDirection);\r\n        return details;\r\n    }\r\n    /**\r\n     * Calculates a hold entry type given the hold course and current\r\n     * inbound course. See FMS guide page 14-21.\r\n     * @param holdCourse The course that the hold will be flown with.\r\n     * @param inboundCourse The course that is being flown towards the hold point.\r\n     * @param turnDirection The direction of the hold turn.\r\n     * @returns The hold entry type for a given set of courses.\r\n     */\r\n    static calculateEntryType(holdCourse, inboundCourse, turnDirection) {\r\n        const courseDiff = Avionics.Utils.diffAngle(inboundCourse, holdCourse);\r\n        if (turnDirection === HoldTurnDirection.Right) {\r\n            if (courseDiff >= -130 && courseDiff <= 70) {\r\n                return HoldEntry.Direct;\r\n            }\r\n            else if (courseDiff < -130 || courseDiff > 175) {\r\n                return HoldEntry.Teardrop;\r\n            }\r\n            else {\r\n                return HoldEntry.Parallel;\r\n            }\r\n        }\r\n        else {\r\n            if (courseDiff >= -130 && courseDiff <= 70) {\r\n                return HoldEntry.Direct;\r\n            }\r\n            else if (courseDiff > 70 || courseDiff < -175) {\r\n                return HoldEntry.Teardrop;\r\n            }\r\n            else {\r\n                return HoldEntry.Parallel;\r\n            }\r\n        }\r\n    }\r\n}\r\n/** The type of hold speed restriction. */\r\nexport var HoldSpeedType;\r\n(function (HoldSpeedType) {\r\n    /** Use FAA hold speed rules. */\r\n    HoldSpeedType[HoldSpeedType[\"FAA\"] = 0] = \"FAA\";\r\n    /** Use ICAO hold speed rules. */\r\n    HoldSpeedType[HoldSpeedType[\"ICAO\"] = 1] = \"ICAO\";\r\n})(HoldSpeedType || (HoldSpeedType = {}));\r\n/** The direction of the hold turn. */\r\nexport var HoldTurnDirection;\r\n(function (HoldTurnDirection) {\r\n    /** Use a right hand turn. */\r\n    HoldTurnDirection[HoldTurnDirection[\"Right\"] = 0] = \"Right\";\r\n    /** Use a left hand turn. */\r\n    HoldTurnDirection[HoldTurnDirection[\"Left\"] = 1] = \"Left\";\r\n})(HoldTurnDirection || (HoldTurnDirection = {}));\r\n/** The current state of the hold. */\r\nexport var HoldState;\r\n(function (HoldState) {\r\n    /** The hold is not active. */\r\n    HoldState[HoldState[\"None\"] = 0] = \"None\";\r\n    /** The hold is currently being entered. */\r\n    HoldState[HoldState[\"Entering\"] = 1] = \"Entering\";\r\n    /** The hold is active. */\r\n    HoldState[HoldState[\"Holding\"] = 2] = \"Holding\";\r\n    /** The hold is being exited. */\r\n    HoldState[HoldState[\"Exiting\"] = 3] = \"Exiting\";\r\n})(HoldState || (HoldState = {}));\r\n/** The hold entry type. */\r\nexport var HoldEntry;\r\n(function (HoldEntry) {\r\n    /** Direct hold entry. */\r\n    HoldEntry[HoldEntry[\"Direct\"] = 0] = \"Direct\";\r\n    /** Teardrop hold entry. */\r\n    HoldEntry[HoldEntry[\"Teardrop\"] = 1] = \"Teardrop\";\r\n    /** Parallel hold entry. */\r\n    HoldEntry[HoldEntry[\"Parallel\"] = 2] = \"Parallel\";\r\n})(HoldEntry || (HoldEntry = {}));\r\n//# sourceMappingURL=HoldDetails.js.map","references":[],"map":"{\"version\":3,\"file\":\"HoldDetails.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/fpm/src/flightplanning/HoldDetails.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"D:/Documents/GitHub/boufogre/salty-747/src/fpm/dist/types/flightplanning/HoldDetails.d.ts","writeByteOrderMark":false,"text":"/**\r\n * Details of a hold procedure for a fix.\r\n */\r\nexport declare class HoldDetails {\r\n    /** The course to fly the hold at. */\r\n    holdCourse: number;\r\n    /** Whether or not the hold course is a true course. */\r\n    isHoldCourseTrue: boolean;\r\n    /** The direction to turn in the hold. */\r\n    turnDirection: HoldTurnDirection;\r\n    /** The amount of time for each hold leg, in seconds. */\r\n    legTime: number;\r\n    /** The amount of distance for each hold leg, in seconds. */\r\n    legDistance: number;\r\n    /** The speed at which to fly the hold, in knots indicated airspeed. */\r\n    speed: number;\r\n    /** The type of hold speed restriction. */\r\n    holdSpeedType: HoldSpeedType;\r\n    /** The time to expect further clearance. */\r\n    efcTime: Date;\r\n    /** The current hold state. */\r\n    state: HoldState;\r\n    /** The hold entry type. */\r\n    entryType: HoldEntry;\r\n    /** The recorded wind direction. */\r\n    windDirection: number;\r\n    /** The recorded wind speed. */\r\n    windSpeed: number;\r\n    /**\r\n     * Creates a default set of hold details.\r\n     * @param course The course to create the hold details for.\r\n     * @param courseTowardsHoldFix The course to the hold fix.\r\n     * @returns A new set of hold details.\r\n     */\r\n    static createDefault(course: number, courseTowardsHoldFix: number): HoldDetails;\r\n    /**\r\n     * Calculates a hold entry type given the hold course and current\r\n     * inbound course. See FMS guide page 14-21.\r\n     * @param holdCourse The course that the hold will be flown with.\r\n     * @param inboundCourse The course that is being flown towards the hold point.\r\n     * @param turnDirection The direction of the hold turn.\r\n     * @returns The hold entry type for a given set of courses.\r\n     */\r\n    static calculateEntryType(holdCourse: number, inboundCourse: number, turnDirection: HoldTurnDirection): HoldEntry;\r\n}\r\n/** The type of hold speed restriction. */\r\nexport declare enum HoldSpeedType {\r\n    /** Use FAA hold speed rules. */\r\n    FAA = 0,\r\n    /** Use ICAO hold speed rules. */\r\n    ICAO = 1\r\n}\r\n/** The direction of the hold turn. */\r\nexport declare enum HoldTurnDirection {\r\n    /** Use a right hand turn. */\r\n    Right = 0,\r\n    /** Use a left hand turn. */\r\n    Left = 1\r\n}\r\n/** The current state of the hold. */\r\nexport declare enum HoldState {\r\n    /** The hold is not active. */\r\n    None = 0,\r\n    /** The hold is currently being entered. */\r\n    Entering = 1,\r\n    /** The hold is active. */\r\n    Holding = 2,\r\n    /** The hold is being exited. */\r\n    Exiting = 3\r\n}\r\n/** The hold entry type. */\r\nexport declare enum HoldEntry {\r\n    /** Direct hold entry. */\r\n    Direct = 0,\r\n    /** Teardrop hold entry. */\r\n    Teardrop = 1,\r\n    /** Parallel hold entry. */\r\n    Parallel = 2\r\n}\r\n"}}
