{"code":"import { __awaiter } from \"tslib\";\r\nimport { FixNamingScheme } from './FixNamingScheme';\r\nimport { GeoMath } from './GeoMath';\r\nimport { HoldDetails, HoldTurnDirection } from './HoldDetails';\r\nimport { RawDataMapper } from './RawDataMapper';\r\n/**\r\n * Creates a collection of waypoints from a legs procedure.\r\n */\r\nexport class LegsProcedure {\r\n    /**\r\n     * Creates an instance of a LegsProcedure.\r\n     * @param _legs The legs that are part of the procedure.\r\n     * @param _previousFix The previous fix before the procedure starts.\r\n     * @param _fixMinusTwo The fix before the previous fix.\r\n     * @param _instrument The instrument that is attached to the flight plan.\r\n     */\r\n    constructor(_legs, _previousFix, _fixMinusTwo, _instrument) {\r\n        this._legs = _legs;\r\n        this._previousFix = _previousFix;\r\n        this._fixMinusTwo = _fixMinusTwo;\r\n        this._instrument = _instrument;\r\n        /** The current index in the procedure. */\r\n        this._currentIndex = 0;\r\n        /** Whether or not there is a discontinuity pending to be mapped. */\r\n        this._isDiscontinuityPending = false;\r\n        /** A collection of the loaded facilities needed for this procedure. */\r\n        this._facilities = new Map();\r\n        /** Whether or not the facilities have completed loading. */\r\n        this._facilitiesLoaded = false;\r\n        /**The collection of facility promises to await on first load. */\r\n        this._facilitiesToLoad = new Map();\r\n        /** Whether or not a non initial-fix procedure start has been added to the procedure. */\r\n        this._addedProcedureStart = false;\r\n        /** A collection of filtering rules for filtering ICAO data to pre-load for the procedure. */\r\n        this.legFilteringRules = [\r\n            icao => icao.trim() !== '',\r\n            //Icao is not empty\r\n            icao => icao[0] !== 'R',\r\n            //Icao is not runway icao, which is not searchable\r\n            icao => icao[0] !== 'A',\r\n            //Icao is not airport icao, which can be skipped\r\n            icao => icao.substr(1, 2) !== '  ',\r\n            //Icao is not missing a region code\r\n            icao => !this._facilitiesToLoad.has(icao) //Icao is not already being loaded\r\n        ];\r\n        for (const leg of this._legs) {\r\n            if (this.isIcaoValid(leg.fixIcao)) {\r\n                this._facilitiesToLoad.set(leg.fixIcao, this._instrument.facilityLoader.getFacilityRaw(leg.fixIcao, 2000));\r\n            }\r\n            if (this.isIcaoValid(leg.originIcao)) {\r\n                this._facilitiesToLoad.set(leg.originIcao, this._instrument.facilityLoader.getFacilityRaw(leg.originIcao, 2000));\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Checks whether or not there are any legs remaining in the procedure.\r\n     * @returns True if there is a next leg, false otherwise.\r\n     */\r\n    hasNext() {\r\n        return this._currentIndex < this._legs.length || this._isDiscontinuityPending;\r\n    }\r\n    /**\r\n     * Gets the next mapped leg from the procedure.\r\n     * @returns The mapped waypoint from the leg of the procedure.\r\n     */\r\n    getNext() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let isLegMappable = false;\r\n            let mappedLeg;\r\n            if (!this._facilitiesLoaded) {\r\n                const facilityResults = yield Promise.all(this._facilitiesToLoad.values());\r\n                for (const facility of facilityResults.filter(f => f !== undefined)) {\r\n                    this._facilities.set(facility.icao, facility);\r\n                }\r\n                this._facilitiesLoaded = true;\r\n            }\r\n            while (!isLegMappable && this._currentIndex < this._legs.length) {\r\n                const currentLeg = this._legs[this._currentIndex];\r\n                isLegMappable = true;\r\n                //Some procedures don't start with 15 (initial fix) but instead start with a heading and distance from\r\n                //a fix: the procedure then starts with the fix exactly\r\n                if (this._currentIndex === 0 && currentLeg.type === 10 && !this._addedProcedureStart) {\r\n                    mappedLeg = this.mapExactFix(currentLeg, this._previousFix);\r\n                    this._addedProcedureStart = true;\r\n                }\r\n                else {\r\n                    try {\r\n                        switch (currentLeg.type) {\r\n                            case 3:\r\n                                mappedLeg = this.mapHeadingUntilDistanceFromOrigin(currentLeg, this._previousFix);\r\n                                break;\r\n                            case 4:\r\n                                //Only map if the fix is itself not a runway fix to avoid double\r\n                                //adding runway fixes\r\n                                if (currentLeg.fixIcao === '' || currentLeg.fixIcao[0] !== 'R') {\r\n                                    mappedLeg = this.mapOriginRadialForDistance(currentLeg, this._previousFix);\r\n                                }\r\n                                else {\r\n                                    isLegMappable = false;\r\n                                }\r\n                                break;\r\n                            case 5:\r\n                            case 21:\r\n                                mappedLeg = this.mapHeadingToInterceptNextLeg(currentLeg, this._previousFix, this._legs[this._currentIndex + 1]);\r\n                                break;\r\n                            case 6:\r\n                            case 23:\r\n                                mappedLeg = this.mapHeadingUntilRadialCrossing(currentLeg, this._previousFix);\r\n                                break;\r\n                            case 9:\r\n                            case 10:\r\n                                mappedLeg = this.mapBearingAndDistanceFromOrigin(currentLeg);\r\n                                break;\r\n                            case 11:\r\n                            case 22:\r\n                                mappedLeg = this.mapVectors(currentLeg, this._previousFix);\r\n                                break;\r\n                            case 14:\r\n                                mappedLeg = this.mapHold(currentLeg, this._fixMinusTwo);\r\n                                break;\r\n                            case 15:\r\n                                {\r\n                                    if (currentLeg.fixIcao[0] !== 'A') {\r\n                                        const leg = this.mapExactFix(currentLeg, this._previousFix);\r\n                                        const prevLeg = this._previousFix;\r\n                                        //If a type 15 (initial fix) comes up in the middle of a plan\r\n                                        if (leg.icao === prevLeg.icao && leg.infos.coordinates.lat === prevLeg.infos.coordinates.lat\r\n                                            && leg.infos.coordinates.long === prevLeg.infos.coordinates.long) {\r\n                                            isLegMappable = false;\r\n                                        }\r\n                                        else {\r\n                                            mappedLeg = leg;\r\n                                        }\r\n                                    }\r\n                                    //If type 15 is an airport itself, we don't need to map it (and the data is generally wrong)\r\n                                    else {\r\n                                        isLegMappable = false;\r\n                                    }\r\n                                }\r\n                                break;\r\n                            case 7:\r\n                            case 17:\r\n                            case 18:\r\n                                mappedLeg = this.mapExactFix(currentLeg, this._previousFix);\r\n                                break;\r\n                            case 2:\r\n                            case 19:\r\n                                mappedLeg = this.mapHeadingUntilAltitude(currentLeg, this._previousFix);\r\n                                break;\r\n                            default:\r\n                                isLegMappable = false;\r\n                                break;\r\n                        }\r\n                    }\r\n                    catch (err) {\r\n                        console.log(`LegsProcedure: Unexpected unmappable leg: ${err}`);\r\n                    }\r\n                    if (mappedLeg !== undefined) {\r\n                        if (this.altitudeIsVerticalAngleInfo(currentLeg)) {\r\n                            mappedLeg.legAltitudeDescription = 1;\r\n                            mappedLeg.legAltitude1 = 100 * Math.round((currentLeg.altitude2 * 3.28084) / 100);\r\n                            mappedLeg.legAltitude2 = 100 * Math.round((currentLeg.altitude1 * 3.28084) / 100);\r\n                        }\r\n                        else {\r\n                            mappedLeg.legAltitudeDescription = currentLeg.altDesc;\r\n                            mappedLeg.legAltitude1 = 100 * Math.round((currentLeg.altitude1 * 3.28084) / 100);\r\n                            mappedLeg.legAltitude2 = 100 * Math.round((currentLeg.altitude2 * 3.28084) / 100);\r\n                        }\r\n                    }\r\n                    this._currentIndex++;\r\n                }\r\n            }\r\n            if (mappedLeg !== undefined) {\r\n                this._fixMinusTwo = this._previousFix;\r\n                this._previousFix = mappedLeg;\r\n                return mappedLeg;\r\n            }\r\n            else {\r\n                return undefined;\r\n            }\r\n        });\r\n    }\r\n    altitudeIsVerticalAngleInfo(leg) {\r\n        return (leg.type === 4 || leg.type === 18)\r\n            && (leg.altDesc === 1 || leg.altDesc === 2)\r\n            && (leg.altitude1 > 0 && leg.altitude2 > 0);\r\n    }\r\n    /**\r\n     * Maps a heading until distance from origin leg.\r\n     * @param leg The procedure leg to map.\r\n     * @param prevLeg The previously mapped waypoint in the procedure.\r\n     * @returns The mapped leg.\r\n     */\r\n    mapHeadingUntilDistanceFromOrigin(leg, prevLeg) {\r\n        const origin = this._facilities.get(leg.originIcao);\r\n        const originIdent = origin.icao.substring(7, 12).trim();\r\n        const bearingToOrigin = Avionics.Utils.computeGreatCircleHeading(prevLeg.infos.coordinates, new LatLongAlt(origin.lat, origin.lon));\r\n        const distanceToOrigin = Avionics.Utils.computeGreatCircleDistance(prevLeg.infos.coordinates, new LatLongAlt(origin.lat, origin.lon)) / LegsProcedure.distanceNormalFactorNM;\r\n        const deltaAngle = this.deltaAngleRadians(bearingToOrigin, leg.course);\r\n        const targetDistance = (leg.distance / 1852) / LegsProcedure.distanceNormalFactorNM;\r\n        const distanceAngle = Math.asin((Math.sin(distanceToOrigin) * Math.sin(deltaAngle)) / Math.sin(targetDistance));\r\n        const inverseDistanceAngle = Math.PI - distanceAngle;\r\n        const legDistance1 = 2 * Math.atan(Math.tan(0.5 * (targetDistance - distanceToOrigin)) * (Math.sin(0.5 * (deltaAngle + distanceAngle))\r\n            / Math.sin(0.5 * (deltaAngle - distanceAngle))));\r\n        const legDistance2 = 2 * Math.atan(Math.tan(0.5 * (targetDistance - distanceToOrigin)) * (Math.sin(0.5 * (deltaAngle + inverseDistanceAngle))\r\n            / Math.sin(0.5 * (deltaAngle - inverseDistanceAngle))));\r\n        const legDistance = targetDistance > distanceToOrigin ? legDistance1 : Math.min(legDistance1, legDistance2);\r\n        const course = leg.course + GeoMath.getMagvar(prevLeg.infos.coordinates.lat, prevLeg.infos.coordinates.long);\r\n        const coordinates = Avionics.Utils.bearingDistanceToCoordinates(course, legDistance * LegsProcedure.distanceNormalFactorNM, prevLeg.infos.coordinates.lat, prevLeg.infos.coordinates.long);\r\n        return this.buildWaypoint(`${originIdent}${Math.trunc(legDistance * LegsProcedure.distanceNormalFactorNM)}`, coordinates);\r\n    }\r\n    /**\r\n     * Maps a bearing/distance fix in the procedure.\r\n     * @param leg The procedure leg to map.\r\n     * @returns The mapped leg.\r\n     */\r\n    mapBearingAndDistanceFromOrigin(leg) {\r\n        const origin = this._facilities.get(leg.originIcao);\r\n        const originIdent = origin.icao.substring(7, 12).trim();\r\n        const course = leg.course + GeoMath.getMagvar(origin.lat, origin.lon);\r\n        const coordinates = Avionics.Utils.bearingDistanceToCoordinates(leg.course, leg.distance / 1852, origin.lat, origin.lon);\r\n        return this.buildWaypoint(`${originIdent}${Math.trunc(leg.distance / 1852)}`, coordinates);\r\n    }\r\n    /**\r\n     * Maps a radial on the origin for a specified distance leg in the procedure.\r\n     * @param leg The procedure leg to map.\r\n     * @param prevLeg The previously mapped leg.\r\n     * @returns The mapped leg.\r\n     */\r\n    mapOriginRadialForDistance(leg, prevLeg) {\r\n        if (leg.fixIcao.trim() !== '') {\r\n            return this.mapExactFix(leg, prevLeg);\r\n        }\r\n        else {\r\n            const origin = this._facilities.get(leg.originIcao);\r\n            const originIdent = origin.icao.substring(7, 12).trim();\r\n            const course = leg.course + GeoMath.getMagvar(prevLeg.infos.coordinates.lat, prevLeg.infos.coordinates.long);\r\n            const coordinates = Avionics.Utils.bearingDistanceToCoordinates(course, leg.distance / 1852, prevLeg.infos.coordinates.lat, prevLeg.infos.coordinates.long);\r\n            const distanceFromOrigin = Avionics.Utils.computeGreatCircleDistance(new LatLongAlt(origin.lat, origin.lon), coordinates);\r\n            return this.buildWaypoint(`${originIdent}${Math.trunc(distanceFromOrigin / 1852)}`, coordinates);\r\n        }\r\n    }\r\n    /**\r\n     * Maps a heading turn to intercept the next leg in the procedure.\r\n     * @param leg The procedure leg to map.\r\n     * @param prevLeg The previously mapped leg.\r\n     * @param nextLeg The next leg in the procedure to intercept.\r\n     * @returns The mapped leg.\r\n     */\r\n    mapHeadingToInterceptNextLeg(leg, prevLeg, nextLeg) {\r\n        let referenceCoordinates;\r\n        let courseToIntercept;\r\n        let referenceFix;\r\n        switch (nextLeg.type) {\r\n            case 4:\r\n            case 7:\r\n            case 15:\r\n            case 17:\r\n            case 18:\r\n                referenceFix = this._facilities.get(nextLeg.fixIcao);\r\n                referenceCoordinates = new LatLongAlt(referenceFix.lat, referenceFix.lon);\r\n                courseToIntercept = nextLeg.course - 180;\r\n                if (courseToIntercept < 0) {\r\n                    courseToIntercept += 360;\r\n                }\r\n                break;\r\n            case 9:\r\n                referenceFix = this._facilities.get(nextLeg.originIcao);\r\n                referenceCoordinates = new LatLongAlt(referenceFix.lat, referenceFix.lon);\r\n                courseToIntercept = nextLeg.course;\r\n                break;\r\n        }\r\n        if (referenceCoordinates !== undefined && courseToIntercept !== undefined) {\r\n            const distanceFromOrigin = Avionics.Utils.computeGreatCircleDistance(prevLeg.infos.coordinates, referenceCoordinates);\r\n            const bearingToOrigin = Avionics.Utils.computeGreatCircleHeading(prevLeg.infos.coordinates, referenceCoordinates);\r\n            const bearingFromOrigin = Avionics.Utils.computeGreatCircleHeading(referenceCoordinates, prevLeg.infos.coordinates);\r\n            const ang1 = this.deltaAngleRadians(bearingToOrigin, leg.course);\r\n            const ang2 = this.deltaAngleRadians(bearingFromOrigin, courseToIntercept);\r\n            const ang3 = Math.acos(Math.sin(ang1) * Math.sin(ang2) * Math.cos(distanceFromOrigin / LegsProcedure.distanceNormalFactorNM) - Math.cos(ang1) * Math.cos(ang2));\r\n            const legDistance = Math.acos((Math.cos(ang1) + Math.cos(ang2) * Math.cos(ang3)) / (Math.sin(ang2) * Math.sin(ang3))) * LegsProcedure.distanceNormalFactorNM;\r\n            const course = leg.course + GeoMath.getMagvar(prevLeg.infos.coordinates.lat, prevLeg.infos.coordinates.long);\r\n            const coordinates = Avionics.Utils.bearingDistanceToCoordinates(course, legDistance, prevLeg.infos.coordinates.lat, prevLeg.infos.coordinates.long);\r\n            return this.buildWaypoint(FixNamingScheme.courseToIntercept(course), coordinates);\r\n        }\r\n    }\r\n    /**\r\n     * Maps flying a heading until crossing a radial of a reference fix.\r\n     * @param leg The procedure leg to map.\r\n     * @param prevLeg The previously mapped leg.\r\n     * @returns The mapped leg.\r\n     */\r\n    mapHeadingUntilRadialCrossing(leg, prevLeg) {\r\n        const origin = this._facilities.get(leg.originIcao);\r\n        const originCoordinates = new LatLongAlt(origin.lat, origin.lon);\r\n        const originToCoordinates = Avionics.Utils.computeGreatCircleHeading(originCoordinates, prevLeg.infos.coordinates);\r\n        const coordinatesToOrigin = Avionics.Utils.computeGreatCircleHeading(prevLeg.infos.coordinates, new LatLongAlt(origin.lat, origin.lon));\r\n        const distanceToOrigin = Avionics.Utils.computeGreatCircleDistance(prevLeg.infos.coordinates, originCoordinates) / LegsProcedure.distanceNormalFactorNM;\r\n        const alpha = this.deltaAngleRadians(coordinatesToOrigin, leg.course);\r\n        const beta = this.deltaAngleRadians(originToCoordinates, leg.theta);\r\n        const gamma = Math.acos(Math.sin(alpha) * Math.sin(beta) * Math.cos(distanceToOrigin) - Math.cos(alpha) * Math.cos(beta));\r\n        const legDistance = Math.acos((Math.cos(beta) + Math.cos(alpha) * Math.cos(gamma)) / (Math.sin(alpha) * Math.sin(gamma)));\r\n        const course = leg.course + GeoMath.getMagvar(prevLeg.infos.coordinates.lat, prevLeg.infos.coordinates.long);\r\n        const coordinates = Avionics.Utils.bearingDistanceToCoordinates(course, legDistance * LegsProcedure.distanceNormalFactorNM, prevLeg.infos.coordinates.lat, prevLeg.infos.coordinates.long);\r\n        return this.buildWaypoint(`${this.getIdent(origin.icao)}${leg.theta}`, coordinates);\r\n    }\r\n    /**\r\n     * Maps flying a heading until a proscribed altitude.\r\n     * @param leg The procedure leg to map.\r\n     * @param prevLeg The previous leg in the procedure.\r\n     * @returns The mapped leg.\r\n     */\r\n    mapHeadingUntilAltitude(leg, prevLeg) {\r\n        const altitudeFeet = (leg.altitude1 * 3.2808399);\r\n        const distanceInNM = altitudeFeet / 750.0;\r\n        const course = leg.course + GeoMath.getMagvar(prevLeg.infos.coordinates.lat, prevLeg.infos.coordinates.long);\r\n        const coordinates = GeoMath.relativeBearingDistanceToCoords(course, distanceInNM, prevLeg.infos.coordinates);\r\n        return this.buildWaypoint(`(${Math.trunc(altitudeFeet)})`, coordinates, prevLeg.infos.magneticVariation);\r\n    }\r\n    /**\r\n     * Maps a vectors instruction.\r\n     * @param leg The procedure leg to map.\r\n     * @param prevLeg The previous leg in the procedure.\r\n     * @returns The mapped leg.\r\n     */\r\n    mapVectors(leg, prevLeg) {\r\n        const course = leg.course + GeoMath.getMagvar(prevLeg.infos.coordinates.lat, prevLeg.infos.coordinates.long);\r\n        const coordinates = GeoMath.relativeBearingDistanceToCoords(course, 5, prevLeg.infos.coordinates);\r\n        const waypoint = this.buildWaypoint('(VECT)', coordinates);\r\n        waypoint.isVectors = true;\r\n        waypoint.endsInDiscontinuity = true;\r\n        return waypoint;\r\n    }\r\n    /**\r\n     * Maps an exact fix leg in the procedure.\r\n     * @param leg The procedure leg to map.\r\n     * @param prevLeg The previous mapped leg in the procedure.\r\n     * @returns The mapped leg.\r\n     */\r\n    mapExactFix(leg, prevLeg) {\r\n        const facility = this._facilities.get(leg.fixIcao);\r\n        if (facility) {\r\n            return RawDataMapper.toWaypoint(facility, this._instrument);\r\n        }\r\n        else {\r\n            const origin = this._facilities.get(leg.originIcao);\r\n            const originIdent = origin.icao.substring(7, 12).trim();\r\n            const coordinates = Avionics.Utils.bearingDistanceToCoordinates(leg.theta, leg.rho / 1852, origin.lat, origin.lon);\r\n            return this.buildWaypoint(`${originIdent}${Math.trunc(leg.rho / 1852)}`, coordinates);\r\n        }\r\n    }\r\n    /**\r\n     * Maps a hold leg in the procedure.\r\n     * @param leg The procedure leg to map.\r\n     * @param fixMinusTwo The fix that is two previous to this leg.\r\n     * @returns The mapped leg.\r\n     */\r\n    mapHold(leg, fixMinusTwo) {\r\n        const facility = this._facilities.get(leg.fixIcao);\r\n        const waypoint = RawDataMapper.toWaypoint(facility, this._instrument);\r\n        waypoint.hasHold = true;\r\n        const course = Avionics.Utils.computeGreatCircleHeading(fixMinusTwo.infos.coordinates, waypoint.infos.coordinates);\r\n        const holdDetails = HoldDetails.createDefault(leg.course, course);\r\n        holdDetails.turnDirection = leg.turnDirection === 1 ? HoldTurnDirection.Left : HoldTurnDirection.Right;\r\n        holdDetails.entryType = HoldDetails.calculateEntryType(leg.course, course, holdDetails.turnDirection);\r\n        waypoint.holdDetails = holdDetails;\r\n        return waypoint;\r\n    }\r\n    /**\r\n     * Gets the difference between two headings in zero north normalized radians.\r\n     * @param a The degrees of heading a.\r\n     * @param b The degrees of heading b.\r\n     * @returns The difference between the two headings in zero north normalized radians.\r\n     */\r\n    deltaAngleRadians(a, b) {\r\n        return Math.abs((Avionics.Utils.fmod((a - b) + 180, 360) - 180) * Avionics.Utils.DEG2RAD);\r\n    }\r\n    /**\r\n     * Gets an ident from an ICAO.\r\n     * @param icao The icao to pull the ident from.\r\n     * @returns The parsed ident.\r\n     */\r\n    getIdent(icao) {\r\n        return icao.substring(7, 12).trim();\r\n    }\r\n    /**\r\n     * Checks if an ICAO is valid to load.\r\n     * @param icao The icao to check.\r\n     * @returns Whether or not the ICAO is valid.\r\n     */\r\n    isIcaoValid(icao) {\r\n        for (const rule of this.legFilteringRules) {\r\n            if (!rule(icao)) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    /**\r\n     * Builds a WayPoint from basic data.\r\n     * @param ident The ident of the waypoint.\r\n     * @param coordinates The coordinates of the waypoint.\r\n     * @param magneticVariation The magnetic variation of the waypoint, if any.\r\n     * @returns The built waypoint.\r\n     */\r\n    buildWaypoint(ident, coordinates, magneticVariation) {\r\n        const waypoint = new WayPoint(this._instrument);\r\n        waypoint.type = 'W';\r\n        waypoint.infos = new IntersectionInfo(this._instrument);\r\n        waypoint.infos.coordinates = coordinates;\r\n        waypoint.infos.magneticVariation = magneticVariation;\r\n        waypoint.ident = ident;\r\n        waypoint.infos.ident = ident;\r\n        return waypoint;\r\n    }\r\n}\r\n/** A normalization factor for calculating distances from triangular ratios. */\r\nLegsProcedure.distanceNormalFactorNM = (21639 / 2) * Math.PI;\r\n//# sourceMappingURL=LegsProcedure.js.map","references":["D:/Documents/GitHub/boufogre/salty-747/src/fpm/src/flightplanning/FixNamingScheme.ts","D:/Documents/GitHub/boufogre/salty-747/src/fpm/src/flightplanning/GeoMath.ts","D:/Documents/GitHub/boufogre/salty-747/src/fpm/src/flightplanning/HoldDetails.ts","D:/Documents/GitHub/boufogre/salty-747/src/fpm/src/flightplanning/RawDataMapper.ts"],"map":"{\"version\":3,\"file\":\"LegsProcedure.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/fpm/src/flightplanning/LegsProcedure.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"D:/Documents/GitHub/boufogre/salty-747/src/fpm/dist/types/flightplanning/LegsProcedure.d.ts","writeByteOrderMark":false,"text":"/**\r\n * Creates a collection of waypoints from a legs procedure.\r\n */\r\nexport declare class LegsProcedure {\r\n    private _legs;\r\n    private _previousFix;\r\n    private _fixMinusTwo;\r\n    private _instrument;\r\n    /** The current index in the procedure. */\r\n    private _currentIndex;\r\n    /** Whether or not there is a discontinuity pending to be mapped. */\r\n    private _isDiscontinuityPending;\r\n    /** A collection of the loaded facilities needed for this procedure. */\r\n    private _facilities;\r\n    /** Whether or not the facilities have completed loading. */\r\n    private _facilitiesLoaded;\r\n    /**The collection of facility promises to await on first load. */\r\n    private _facilitiesToLoad;\r\n    /** Whether or not a non initial-fix procedure start has been added to the procedure. */\r\n    private _addedProcedureStart;\r\n    /** A normalization factor for calculating distances from triangular ratios. */\r\n    static distanceNormalFactorNM: number;\r\n    /** A collection of filtering rules for filtering ICAO data to pre-load for the procedure. */\r\n    private legFilteringRules;\r\n    /**\r\n     * Creates an instance of a LegsProcedure.\r\n     * @param _legs The legs that are part of the procedure.\r\n     * @param _previousFix The previous fix before the procedure starts.\r\n     * @param _fixMinusTwo The fix before the previous fix.\r\n     * @param _instrument The instrument that is attached to the flight plan.\r\n     */\r\n    constructor(_legs: ProcedureLeg[], _previousFix: WayPoint, _fixMinusTwo: WayPoint, _instrument: BaseInstrument);\r\n    /**\r\n     * Checks whether or not there are any legs remaining in the procedure.\r\n     * @returns True if there is a next leg, false otherwise.\r\n     */\r\n    hasNext(): boolean;\r\n    /**\r\n     * Gets the next mapped leg from the procedure.\r\n     * @returns The mapped waypoint from the leg of the procedure.\r\n     */\r\n    getNext(): Promise<WayPoint>;\r\n    private altitudeIsVerticalAngleInfo;\r\n    /**\r\n     * Maps a heading until distance from origin leg.\r\n     * @param leg The procedure leg to map.\r\n     * @param prevLeg The previously mapped waypoint in the procedure.\r\n     * @returns The mapped leg.\r\n     */\r\n    mapHeadingUntilDistanceFromOrigin(leg: ProcedureLeg, prevLeg: WayPoint): WayPoint;\r\n    /**\r\n     * Maps a bearing/distance fix in the procedure.\r\n     * @param leg The procedure leg to map.\r\n     * @returns The mapped leg.\r\n     */\r\n    mapBearingAndDistanceFromOrigin(leg: ProcedureLeg): WayPoint;\r\n    /**\r\n     * Maps a radial on the origin for a specified distance leg in the procedure.\r\n     * @param leg The procedure leg to map.\r\n     * @param prevLeg The previously mapped leg.\r\n     * @returns The mapped leg.\r\n     */\r\n    mapOriginRadialForDistance(leg: ProcedureLeg, prevLeg: WayPoint): WayPoint;\r\n    /**\r\n     * Maps a heading turn to intercept the next leg in the procedure.\r\n     * @param leg The procedure leg to map.\r\n     * @param prevLeg The previously mapped leg.\r\n     * @param nextLeg The next leg in the procedure to intercept.\r\n     * @returns The mapped leg.\r\n     */\r\n    mapHeadingToInterceptNextLeg(leg: ProcedureLeg, prevLeg: WayPoint, nextLeg: ProcedureLeg): WayPoint;\r\n    /**\r\n     * Maps flying a heading until crossing a radial of a reference fix.\r\n     * @param leg The procedure leg to map.\r\n     * @param prevLeg The previously mapped leg.\r\n     * @returns The mapped leg.\r\n     */\r\n    mapHeadingUntilRadialCrossing(leg: ProcedureLeg, prevLeg: WayPoint): WayPoint;\r\n    /**\r\n     * Maps flying a heading until a proscribed altitude.\r\n     * @param leg The procedure leg to map.\r\n     * @param prevLeg The previous leg in the procedure.\r\n     * @returns The mapped leg.\r\n     */\r\n    mapHeadingUntilAltitude(leg: ProcedureLeg, prevLeg: WayPoint): WayPoint;\r\n    /**\r\n     * Maps a vectors instruction.\r\n     * @param leg The procedure leg to map.\r\n     * @param prevLeg The previous leg in the procedure.\r\n     * @returns The mapped leg.\r\n     */\r\n    mapVectors(leg: ProcedureLeg, prevLeg: WayPoint): WayPoint;\r\n    /**\r\n     * Maps an exact fix leg in the procedure.\r\n     * @param leg The procedure leg to map.\r\n     * @param prevLeg The previous mapped leg in the procedure.\r\n     * @returns The mapped leg.\r\n     */\r\n    mapExactFix(leg: ProcedureLeg, prevLeg: WayPoint): WayPoint;\r\n    /**\r\n     * Maps a hold leg in the procedure.\r\n     * @param leg The procedure leg to map.\r\n     * @param fixMinusTwo The fix that is two previous to this leg.\r\n     * @returns The mapped leg.\r\n     */\r\n    mapHold(leg: ProcedureLeg, fixMinusTwo: WayPoint): WayPoint;\r\n    /**\r\n     * Gets the difference between two headings in zero north normalized radians.\r\n     * @param a The degrees of heading a.\r\n     * @param b The degrees of heading b.\r\n     * @returns The difference between the two headings in zero north normalized radians.\r\n     */\r\n    private deltaAngleRadians;\r\n    /**\r\n     * Gets an ident from an ICAO.\r\n     * @param icao The icao to pull the ident from.\r\n     * @returns The parsed ident.\r\n     */\r\n    private getIdent;\r\n    /**\r\n     * Checks if an ICAO is valid to load.\r\n     * @param icao The icao to check.\r\n     * @returns Whether or not the ICAO is valid.\r\n     */\r\n    private isIcaoValid;\r\n    /**\r\n     * Builds a WayPoint from basic data.\r\n     * @param ident The ident of the waypoint.\r\n     * @param coordinates The coordinates of the waypoint.\r\n     * @param magneticVariation The magnetic variation of the waypoint, if any.\r\n     * @returns The built waypoint.\r\n     */\r\n    buildWaypoint(ident: string, coordinates: LatLongAlt, magneticVariation?: number): WayPoint;\r\n}\r\n"}}
