{"code":"import { __awaiter } from \"tslib\";\r\nimport { SegmentType, FlightPlanSegment } from './FlightPlanSegment';\r\nimport { LegsProcedure } from './LegsProcedure';\r\nimport { RawDataMapper } from './RawDataMapper';\r\nimport { ProcedureDetails } from './ProcedureDetails';\r\nimport { DirectTo } from './DirectTo';\r\nimport { GeoMath } from './GeoMath';\r\n/**\r\n * A flight plan managed by the FlightPlanManager.\r\n */\r\nexport class ManagedFlightPlan {\r\n    constructor() {\r\n        /** The cruise altitude for this flight plan. */\r\n        this.cruiseAltitude = 0;\r\n        /** The index of the currently active waypoint. */\r\n        this.activeWaypointIndex = 0;\r\n        /** The details for selected procedures on this flight plan. */\r\n        this.procedureDetails = new ProcedureDetails();\r\n        /** The details of any direct-to procedures on this flight plan. */\r\n        this.directTo = new DirectTo();\r\n        /** The current active segments of the flight plan. */\r\n        this._segments = [new FlightPlanSegment(SegmentType.Enroute, 0, [])];\r\n    }\r\n    /** The departure segment of the flight plan. */\r\n    get departure() { return this.getSegment(SegmentType.Departure); }\r\n    /** The enroute segment of the flight plan. */\r\n    get enroute() { return this.getSegment(SegmentType.Enroute); }\r\n    /** The arrival segment of the flight plan. */\r\n    get arrival() { return this.getSegment(SegmentType.Arrival); }\r\n    /** The approach segment of the flight plan. */\r\n    get approach() { return this.getSegment(SegmentType.Approach); }\r\n    /** The approach segment of the flight plan. */\r\n    get missed() { return this.getSegment(SegmentType.Missed); }\r\n    /** Whether the flight plan has an origin airfield. */\r\n    get hasOrigin() { return this.originAirfield; }\r\n    /** Whether the flight plan has a destination airfield. */\r\n    get hasDestination() { return this.destinationAirfield; }\r\n    /** The currently active waypoint. */\r\n    get activeWaypoint() { return this.waypoints[this.activeWaypointIndex]; }\r\n    /** The waypoints of the flight plan. */\r\n    get waypoints() {\r\n        const waypoints = [];\r\n        if (this.originAirfield) {\r\n            waypoints.push(this.originAirfield);\r\n        }\r\n        for (const segment of this._segments) {\r\n            waypoints.push(...segment.waypoints);\r\n        }\r\n        if (this.destinationAirfield) {\r\n            waypoints.push(this.destinationAirfield);\r\n        }\r\n        return waypoints;\r\n    }\r\n    /** The length of the flight plan. */\r\n    get length() {\r\n        const lastSeg = this._segments[this._segments.length - 1];\r\n        return lastSeg.offset + lastSeg.waypoints.length + (this.hasDestination ? 1 : 0);\r\n    }\r\n    get checksum() {\r\n        let checksum = 0;\r\n        const waypoints = this.waypoints;\r\n        for (let i = 0; i < waypoints.length; i++) {\r\n            checksum += waypoints[i].infos.coordinates.lat;\r\n            checksum += waypoints[i].legAltitude1 + waypoints[i].legAltitude2 + waypoints[i].legAltitudeDescription + waypoints[i].speedConstraint;\r\n        }\r\n        return checksum;\r\n    }\r\n    /** The non-approach waypoints of the flight plan. */\r\n    get nonApproachWaypoints() {\r\n        const waypoints = [];\r\n        if (this.originAirfield) {\r\n            waypoints.push(this.originAirfield);\r\n        }\r\n        for (const segment of this._segments.filter(s => s.type < SegmentType.Approach)) {\r\n            waypoints.push(...segment.waypoints);\r\n        }\r\n        if (this.destinationAirfield) {\r\n            waypoints.push(this.destinationAirfield);\r\n        }\r\n        return waypoints;\r\n    }\r\n    /**\r\n     * Sets the parent instrument that the flight plan is attached to locally.\r\n     * @param instrument The instrument that the flight plan is attached to.\r\n     */\r\n    setParentInstrument(instrument) {\r\n        this._parentInstrument = instrument;\r\n    }\r\n    /**\r\n     * Clears the flight plan.\r\n     */\r\n    clearPlan() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            this.originAirfield = undefined;\r\n            this.destinationAirfield = undefined;\r\n            this.cruiseAltitude = 0;\r\n            this.activeWaypointIndex = 0;\r\n            this.procedureDetails = new ProcedureDetails();\r\n            this.directTo = new DirectTo();\r\n            //await GPS.clearPlan();\r\n            this._segments = [new FlightPlanSegment(SegmentType.Enroute, 0, [])];\r\n        });\r\n    }\r\n    /**\r\n     * Syncs the flight plan to FS9GPS.\r\n     */\r\n    syncToGPS() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            // await GPS.clearPlan();\r\n            // for (var i = 0; i < this.waypoints.length; i++) {\r\n            //   const waypoint = this.waypoints[i];\r\n            //   if (waypoint.icao && waypoint.icao.trim() !== '') {\r\n            //     await GPS.addIcaoWaypoint(waypoint.icao, i);\r\n            //   }\r\n            //   else {\r\n            //     await GPS.addUserWaypoint(waypoint.infos.coordinates.lat, waypoint.infos.coordinates.long, i, waypoint.ident);\r\n            //   }\r\n            //   if (waypoint.endsInDiscontinuity) {\r\n            //     break;\r\n            //   }\r\n            // }\r\n            // await GPS.setActiveWaypoint(this.activeWaypointIndex);\r\n            // await GPS.logCurrentPlan();\r\n        });\r\n    }\r\n    /**\r\n     * Adds a waypoint to the flight plan.\r\n     * @param waypoint The waypoint to add.\r\n     * @param index The index to add the waypoint at. If ommitted the waypoint will\r\n     * be appended to the end of the flight plan.\r\n     * @param segmentType The type of segment to add the waypoint to.\r\n     */\r\n    addWaypoint(waypoint, index, segmentType) {\r\n        const mappedWaypoint = (waypoint instanceof WayPoint) ? waypoint : RawDataMapper.toWaypoint(waypoint, this._parentInstrument);\r\n        if (mappedWaypoint.type === 'A' && index === 0) {\r\n            this.originAirfield = mappedWaypoint;\r\n            this.procedureDetails.departureIndex = -1;\r\n            this.procedureDetails.departureRunwayIndex = -1;\r\n            this.procedureDetails.departureTransitionIndex = -1;\r\n            this.procedureDetails.originRunwayIndex = -1;\r\n            this.reflowSegments();\r\n            this.reflowDistances();\r\n        }\r\n        else if (mappedWaypoint.type === 'A' && index === undefined) {\r\n            this.destinationAirfield = mappedWaypoint;\r\n            this.procedureDetails.arrivalIndex = -1;\r\n            this.procedureDetails.arrivalRunwayIndex = -1;\r\n            this.procedureDetails.arrivalTransitionIndex = -1;\r\n            this.procedureDetails.approachIndex = -1;\r\n            this.procedureDetails.approachTransitionIndex = -1;\r\n            this.reflowSegments();\r\n            this.reflowDistances();\r\n        }\r\n        else {\r\n            let segment = segmentType !== undefined\r\n                ? this.getSegment(segmentType)\r\n                : this.findSegmentByWaypointIndex(index);\r\n            // hitting first waypoint in segment > enroute\r\n            if (segment.type > SegmentType.Enroute && index == segment.offset) {\r\n                const segIdx = this._segments.findIndex((seg) => { return seg.type == segment.type; });\r\n                // is prev segment enroute?\r\n                const prevSeg = this._segments[segIdx - 1];\r\n                if (prevSeg.type == SegmentType.Enroute) {\r\n                    segment = prevSeg;\r\n                }\r\n            }\r\n            if (segment) {\r\n                if (index > this.length) {\r\n                    index = undefined;\r\n                }\r\n                if (index !== undefined) {\r\n                    const segmentIndex = index - segment.offset;\r\n                    if (segmentIndex < segment.waypoints.length) {\r\n                        segment.waypoints.splice(segmentIndex, 0, mappedWaypoint);\r\n                    }\r\n                    else {\r\n                        segment.waypoints.push(mappedWaypoint);\r\n                    }\r\n                }\r\n                else {\r\n                    segment.waypoints.push(mappedWaypoint);\r\n                }\r\n                this.reflowSegments();\r\n                this.reflowDistances();\r\n                if (this.activeWaypointIndex === 0 && this.length > 1) {\r\n                    this.activeWaypointIndex = 1;\r\n                }\r\n                else if (this.activeWaypointIndex === 1 && waypoint.isRunway && segment.type === SegmentType.Departure) {\r\n                    this.activeWaypointIndex = 2;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Removes a waypoint from the flight plan.\r\n     * @param index The index of the waypoint to remove.\r\n     */\r\n    removeWaypoint(index) {\r\n        if (this.originAirfield && index === 0) {\r\n            this.originAirfield = undefined;\r\n            this.reflowSegments();\r\n            this.reflowDistances();\r\n        }\r\n        else if (this.destinationAirfield && index === this.length - 1) {\r\n            this.destinationAirfield = undefined;\r\n        }\r\n        else {\r\n            const segment = this.findSegmentByWaypointIndex(index);\r\n            if (segment) {\r\n                segment.waypoints.splice(index - segment.offset, 1);\r\n                if (segment.waypoints.length === 0 && segment.type !== SegmentType.Enroute) {\r\n                    this.removeSegment(segment.type);\r\n                }\r\n                this.reflowSegments();\r\n                this.reflowDistances();\r\n            }\r\n        }\r\n        if (index < this.activeWaypointIndex) {\r\n            this.activeWaypointIndex--;\r\n        }\r\n    }\r\n    /**\r\n     * Gets a waypoint by index from the flight plan.\r\n     * @param index The index of the waypoint to get.\r\n     */\r\n    getWaypoint(index) {\r\n        if (this.originAirfield && index === 0) {\r\n            return this.originAirfield;\r\n        }\r\n        if (this.destinationAirfield && index === this.length - 1) {\r\n            return this.destinationAirfield;\r\n        }\r\n        const segment = this.findSegmentByWaypointIndex(index);\r\n        if (segment) {\r\n            return segment.waypoints[index - segment.offset];\r\n        }\r\n    }\r\n    /**\r\n     * Adds a plan segment to the flight plan.\r\n     * @param type The type of the segment to add.\r\n     */\r\n    addSegment(type) {\r\n        const segment = new FlightPlanSegment(type, 0, []);\r\n        this._segments.push(segment);\r\n        this._segments.sort((a, b) => a.type - b.type);\r\n        this.reflowSegments();\r\n        return segment;\r\n    }\r\n    /**\r\n     * Removes a plan segment from the flight plan.\r\n     * @param type The type of plan segment to remove.\r\n     */\r\n    removeSegment(type) {\r\n        const segmentIndex = this._segments.findIndex(s => s.type === type);\r\n        if (segmentIndex > -1) {\r\n            this._segments.splice(segmentIndex, 1);\r\n        }\r\n    }\r\n    /**\r\n     * Reflows waypoint index offsets accross plans segments.\r\n     */\r\n    reflowSegments() {\r\n        let index = 0;\r\n        if (this.originAirfield) {\r\n            index = 1;\r\n        }\r\n        for (const segment of this._segments) {\r\n            segment.offset = index;\r\n            index += segment.waypoints.length;\r\n        }\r\n    }\r\n    /**\r\n     * Gets a flight plan segment of the specified type.\r\n     * @param type The type of flight plan segment to get.\r\n     * @returns The found segment, or FlightPlanSegment.Empty if not found.\r\n     */\r\n    getSegment(type) {\r\n        const segment = this._segments.find(s => s.type === type);\r\n        return segment !== undefined ? segment : FlightPlanSegment.Empty;\r\n    }\r\n    /**\r\n     * Finds a flight plan segment by waypoint index.\r\n     * @param index The index of the waypoint to find the segment for.\r\n     * @returns The located segment, if any.\r\n     */\r\n    findSegmentByWaypointIndex(index) {\r\n        for (let i = 0; i < this._segments.length; i++) {\r\n            const segMaxIdx = this._segments[i].offset + this._segments[i].waypoints.length;\r\n            if (segMaxIdx > index) {\r\n                return this._segments[i];\r\n            }\r\n        }\r\n        return this._segments[this._segments.length - 1];\r\n    }\r\n    /**\r\n     * Recalculates all waypoint bearings and distances in the flight plan.\r\n     */\r\n    reflowDistances() {\r\n        let cumulativeDistance = 0;\r\n        const waypoints = this.waypoints;\r\n        for (let i = 0; i < waypoints.length; i++) {\r\n            if (i > 0) {\r\n                //If there's an approach selected and this is the last approach waypoint, use the destination waypoint for coordinates\r\n                //Runway waypoints do not have coordinates\r\n                const referenceWaypoint = waypoints[i];\r\n                const prevWaypoint = waypoints[i - 1];\r\n                const trueCourseToWaypoint = Avionics.Utils.computeGreatCircleHeading(prevWaypoint.infos.coordinates, referenceWaypoint.infos.coordinates);\r\n                referenceWaypoint.bearingInFP = trueCourseToWaypoint - GeoMath.getMagvar(prevWaypoint.infos.coordinates.lat, prevWaypoint.infos.coordinates.long);\r\n                referenceWaypoint.bearingInFP = referenceWaypoint.bearingInFP < 0 ? 360 + referenceWaypoint.bearingInFP : referenceWaypoint.bearingInFP;\r\n                referenceWaypoint.distanceInFP = Avionics.Utils.computeGreatCircleDistance(prevWaypoint.infos.coordinates, referenceWaypoint.infos.coordinates);\r\n                cumulativeDistance += referenceWaypoint.distanceInFP;\r\n                referenceWaypoint.cumulativeDistanceInFP = cumulativeDistance;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Copies a sanitized version of the flight plan for shared data storage.\r\n     * @returns The sanitized flight plan.\r\n     */\r\n    serialize() {\r\n        var _a;\r\n        const planCopy = new ManagedFlightPlan();\r\n        const copyWaypoint = (waypoint) => ({\r\n            icao: waypoint.icao,\r\n            ident: waypoint.ident,\r\n            type: waypoint.type,\r\n            legAltitudeDescription: waypoint.legAltitudeDescription,\r\n            legAltitude1: waypoint.legAltitude1,\r\n            legAltitude2: waypoint.legAltitude2,\r\n            isVectors: waypoint.isVectors,\r\n            endsInDiscontinuity: waypoint.endsInDiscontinuity,\r\n            bearingInFP: waypoint.bearingInFP,\r\n            distanceInFP: waypoint.distanceInFP,\r\n            cumulativeDistanceInFP: waypoint.cumulativeDistanceInFP,\r\n            isRunway: waypoint.isRunway,\r\n            hasHold: waypoint.hasHold,\r\n            holdDetails: waypoint.holdDetails,\r\n            infos: {\r\n                icao: waypoint.infos.icao,\r\n                ident: waypoint.infos.ident,\r\n                airwayIn: waypoint.infos.airwayIn,\r\n                airwayOut: waypoint.infos.airwayOut,\r\n                routes: waypoint.infos.routes,\r\n                coordinates: {\r\n                    lat: waypoint.infos.coordinates.lat,\r\n                    long: waypoint.infos.coordinates.long,\r\n                    alt: waypoint.infos.coordinates.alt\r\n                }\r\n            }\r\n        });\r\n        const copyAirfield = (airfield) => {\r\n            const copy = Object.assign(new WayPoint(undefined), airfield);\r\n            copy.infos = Object.assign(new AirportInfo(undefined), copy.infos);\r\n            delete copy.instrument;\r\n            delete copy.infos.instrument;\r\n            delete copy._svgElements;\r\n            delete copy.infos._svgElements;\r\n            return copy;\r\n        };\r\n        planCopy.activeWaypointIndex = this.activeWaypointIndex;\r\n        planCopy.destinationAirfield = this.destinationAirfield && copyAirfield(this.destinationAirfield);\r\n        planCopy.originAirfield = this.originAirfield && copyAirfield(this.originAirfield);\r\n        planCopy.procedureDetails = Object.assign({}, this.procedureDetails);\r\n        planCopy.directTo = Object.assign({}, this.directTo);\r\n        planCopy.directTo.interceptPoints = (_a = planCopy.directTo.interceptPoints) === null || _a === void 0 ? void 0 : _a.map(w => copyWaypoint(w));\r\n        const copySegments = [];\r\n        for (const segment of this._segments) {\r\n            const copySegment = new FlightPlanSegment(segment.type, segment.offset, []);\r\n            for (const waypoint of segment.waypoints) {\r\n                copySegment.waypoints.push(copyWaypoint(waypoint));\r\n            }\r\n            copySegments.push(copySegment);\r\n        }\r\n        planCopy._segments = copySegments;\r\n        return planCopy;\r\n    }\r\n    /**\r\n     * Copies the flight plan.\r\n     * @returns The copied flight plan.\r\n     */\r\n    copy() {\r\n        const newFlightPlan = Object.assign(new ManagedFlightPlan(), this);\r\n        newFlightPlan.setParentInstrument(this._parentInstrument);\r\n        newFlightPlan._segments = [];\r\n        for (let i = 0; i < this._segments.length; i++) {\r\n            const seg = this._segments[i];\r\n            newFlightPlan._segments[i] = Object.assign(new FlightPlanSegment(seg.type, seg.offset, []), seg);\r\n            newFlightPlan._segments[i].waypoints = [...seg.waypoints.map(w => Object.assign(new WayPoint(w.instrument), w))];\r\n        }\r\n        newFlightPlan.procedureDetails = Object.assign(new ProcedureDetails(), this.procedureDetails);\r\n        newFlightPlan.directTo = Object.assign(new DirectTo(), this.directTo);\r\n        newFlightPlan.directTo.interceptPoints = this.directTo.interceptPoints !== undefined ? [...this.directTo.interceptPoints] : undefined;\r\n        return newFlightPlan;\r\n    }\r\n    /**\r\n     * Reverses the flight plan.\r\n     */\r\n    reverse() {\r\n        //TODO: Fix flight plan indexes after reversal\r\n        //this._waypoints.reverse();\r\n    }\r\n    /**\r\n     * Goes direct to the specified waypoint index in the flight plan.\r\n     * @param index The waypoint index to go direct to.\r\n     */\r\n    addDirectTo(index) {\r\n        const interceptPoints = this.calculateDirectIntercept(this.getWaypoint(index));\r\n        this.addWaypoint(interceptPoints[0], index);\r\n        this.activeWaypointIndex = index + 1;\r\n        this.directTo.isActive = true;\r\n        this.directTo.waypointIsInFlightPlan = true;\r\n        this.directTo.planWaypointIndex = index + 1;\r\n        this.directTo.interceptPoints = interceptPoints;\r\n    }\r\n    /**\r\n     * Calculates an intercept path to a direct-to waypoint.\r\n     * @param waypoint The waypoint to calculate the path to.\r\n     * @returns The waypoints that make up the intercept path.\r\n     */\r\n    calculateDirectIntercept(waypoint) {\r\n        const lat = SimVar.GetSimVarValue(\"PLANE LATITUDE\", \"degree latitude\");\r\n        const long = SimVar.GetSimVarValue(\"PLANE LONGITUDE\", \"degree longitude\");\r\n        const planeCoords = new LatLongAlt(lat, long);\r\n        const groundSpeed = SimVar.GetSimVarValue(\"GPS GROUND SPEED\", \"knots\");\r\n        const planeHeading = SimVar.GetSimVarValue(\"PLANE HEADING DEGREES TRUE\", \"Radians\") * Avionics.Utils.RAD2DEG;\r\n        const headingToFix = Avionics.Utils.computeGreatCircleHeading(planeCoords, waypoint.infos.coordinates);\r\n        const angleDiff = Math.abs(Avionics.Utils.diffAngle(planeHeading, headingToFix));\r\n        const turnDurationSeconds = (angleDiff / 3) + 6;\r\n        const interceptDistance = (groundSpeed / 60 / 60) * turnDurationSeconds * 1.25;\r\n        const createInterceptPoint = (coords) => {\r\n            const interceptWaypoint = new WayPoint(this._parentInstrument);\r\n            interceptWaypoint.ident = '$DIR';\r\n            interceptWaypoint.infos = new IntersectionInfo(this._parentInstrument);\r\n            interceptWaypoint.infos.coordinates = coords;\r\n            return interceptWaypoint;\r\n        };\r\n        const coords = Avionics.Utils.bearingDistanceToCoordinates(planeHeading, Math.min(interceptDistance, 1.0), lat, long);\r\n        return [createInterceptPoint(coords)];\r\n        //TODO: Work out better direct to intercept waypoint(s)\r\n        /*\r\n        if (angleDiff < 90 && angleDiff > -90) {\r\n          const coords = Avionics.Utils.bearingDistanceToCoordinates(planeHeading, interceptDistance, lat, long);\r\n          return [createInterceptPoint(planeCoords), createInterceptPoint(coords)];\r\n        }\r\n        else {\r\n          const coords1 = Avionics.Utils.bearingDistanceToCoordinates(planeHeading, interceptDistance / 2, lat, long);\r\n          const coords2 = Avionics.Utils.bearingDistanceToCoordinates(planeHeading + (angleDiff / 2), interceptDistance / 2, coords1.lat, coords1.long);\r\n    \r\n          return [createInterceptPoint(planeCoords), createInterceptPoint(coords1), createInterceptPoint(coords2)];\r\n        }\r\n        */\r\n    }\r\n    /**\r\n     * Builds a departure into the flight plan from indexes in the departure airport information.\r\n     */\r\n    buildDeparture() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const legs = [];\r\n            const origin = this.originAirfield;\r\n            const departureIndex = this.procedureDetails.departureIndex;\r\n            const runwayIndex = this.procedureDetails.departureRunwayIndex;\r\n            const transitionIndex = this.procedureDetails.departureTransitionIndex;\r\n            const selectedOriginRunwayIndex = this.procedureDetails.originRunwayIndex;\r\n            const airportInfo = origin.infos;\r\n            if (departureIndex !== -1 && runwayIndex !== -1) {\r\n                const runwayTransition = airportInfo.departures[departureIndex].runwayTransitions[runwayIndex];\r\n                if (runwayTransition !== undefined) {\r\n                    legs.push(...runwayTransition.legs);\r\n                }\r\n            }\r\n            if (departureIndex !== -1) {\r\n                legs.push(...airportInfo.departures[departureIndex].commonLegs);\r\n            }\r\n            if (transitionIndex !== -1 && departureIndex !== -1) {\r\n                // TODO: are enroutetransitions working?\r\n                if (airportInfo.departures[departureIndex].enRouteTransitions.length > 0) {\r\n                    const transition = airportInfo.departures[departureIndex].enRouteTransitions[transitionIndex].legs;\r\n                    legs.push(...transition);\r\n                }\r\n            }\r\n            let segment = this.departure;\r\n            if (segment !== FlightPlanSegment.Empty) {\r\n                for (let i = 0; i < segment.waypoints.length; i++) {\r\n                    this.removeWaypoint(segment.offset);\r\n                }\r\n                this.removeSegment(segment.type);\r\n            }\r\n            if (legs.length > 0 || selectedOriginRunwayIndex !== -1 || (departureIndex !== -1 && runwayIndex !== -1)) {\r\n                segment = this.addSegment(SegmentType.Departure);\r\n                let procedure = new LegsProcedure(legs, origin, undefined, this._parentInstrument);\r\n                let runway;\r\n                if (selectedOriginRunwayIndex !== -1) {\r\n                    runway = airportInfo.oneWayRunways[selectedOriginRunwayIndex];\r\n                }\r\n                else if (runwayIndex !== -1) {\r\n                    runway = this.getRunway(airportInfo.oneWayRunways, airportInfo.departures[departureIndex].runwayTransitions[runwayIndex].name);\r\n                }\r\n                if (runway) {\r\n                    const selectedRunwayMod = runway.designation.slice(-1);\r\n                    let selectedRunwayOutput = undefined;\r\n                    if (selectedRunwayMod == \"L\" || selectedRunwayMod == \"C\" || selectedRunwayMod == \"R\") {\r\n                        if (runway.designation.length == 2) {\r\n                            selectedRunwayOutput = \"0\" + runway.designation;\r\n                        }\r\n                        else {\r\n                            selectedRunwayOutput = runway.designation;\r\n                        }\r\n                    }\r\n                    else {\r\n                        if (runway.designation.length == 2) {\r\n                            selectedRunwayOutput = runway.designation;\r\n                        }\r\n                        else {\r\n                            selectedRunwayOutput = \"0\" + runway.designation;\r\n                        }\r\n                    }\r\n                    const runwayWaypoint = procedure.buildWaypoint(`RW${selectedRunwayOutput}`, runway.beginningCoordinates);\r\n                    // runwayWaypoint.legAltitudeDescription = 1;\r\n                    // runwayWaypoint.legAltitude1 = (runway.elevation * 3.28084) + 50;\r\n                    runwayWaypoint.isRunway = true;\r\n                    this.addWaypoint(runwayWaypoint, undefined, segment.type);\r\n                    procedure = new LegsProcedure(legs, runwayWaypoint, origin, this._parentInstrument);\r\n                }\r\n                let waypointIndex = segment.offset;\r\n                while (procedure.hasNext()) {\r\n                    const waypoint = yield procedure.getNext();\r\n                    if (waypoint !== undefined) {\r\n                        this.addWaypoint(waypoint, ++waypointIndex, segment.type);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Builds an arrival into the flight plan from indexes in the arrival airport information.\r\n     */\r\n    buildArrival() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const legs = [];\r\n            const destination = this.destinationAirfield;\r\n            const arrivalIndex = this.procedureDetails.arrivalIndex;\r\n            const arrivalRunwayIndex = this.procedureDetails.arrivalRunwayIndex;\r\n            const arrivalTransitionIndex = this.procedureDetails.arrivalTransitionIndex;\r\n            const destinationInfo = destination.infos;\r\n            if (arrivalIndex !== -1 && arrivalTransitionIndex !== -1) {\r\n                const transition = destinationInfo.arrivals[arrivalIndex].enRouteTransitions[arrivalTransitionIndex];\r\n                if (transition !== undefined) {\r\n                    legs.push(...transition.legs);\r\n                }\r\n            }\r\n            if (arrivalIndex !== -1) {\r\n                legs.push(...destinationInfo.arrivals[arrivalIndex].commonLegs);\r\n            }\r\n            if (arrivalIndex !== -1 && arrivalRunwayIndex !== -1) {\r\n                const runwayTransition = destinationInfo.arrivals[arrivalIndex].runwayTransitions[arrivalRunwayIndex];\r\n                legs.push(...runwayTransition.legs);\r\n            }\r\n            let { startIndex, segment } = this.truncateSegment(SegmentType.Arrival);\r\n            if (legs.length > 0) {\r\n                if (segment === FlightPlanSegment.Empty) {\r\n                    segment = this.addSegment(SegmentType.Arrival);\r\n                    startIndex = segment.offset;\r\n                }\r\n                const procedure = new LegsProcedure(legs, this.getWaypoint(segment.offset - 1), this.getWaypoint(segment.offset - 2), this._parentInstrument);\r\n                let waypointIndex = segment.offset;\r\n                while (procedure.hasNext()) {\r\n                    const waypoint = yield procedure.getNext();\r\n                    if (waypoint) {\r\n                        this.addWaypoint(waypoint, ++waypointIndex, segment.type);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Builds an approach into the flight plan from indexes in the arrival airport information.\r\n     */\r\n    buildApproach() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const legs = [];\r\n            const destination = this.destinationAirfield;\r\n            const approachIndex = this.procedureDetails.approachIndex;\r\n            const approachTransitionIndex = this.procedureDetails.approachTransitionIndex;\r\n            const destinationRunwayIndex = this.procedureDetails.destinationRunwayIndex;\r\n            const destinationRunwayExtension = this.procedureDetails.destinationRunwayExtension;\r\n            const destinationInfo = destination.infos;\r\n            if (approachIndex !== -1 && approachTransitionIndex !== -1) {\r\n                const transition = destinationInfo.approaches[approachIndex].transitions[approachTransitionIndex].legs;\r\n                legs.push(...transition);\r\n            }\r\n            if (approachIndex !== -1) {\r\n                legs.push(...destinationInfo.approaches[approachIndex].finalLegs);\r\n            }\r\n            let { startIndex, segment } = this.truncateSegment(SegmentType.Approach);\r\n            let { startIndex: missedStartIndex, segment: missedSegment } = this.truncateSegment(SegmentType.Missed);\r\n            if (legs.length > 0 || approachIndex !== -1 || destinationRunwayIndex !== -1) {\r\n                //If we're in the missed approach segment, shift everything backwards to\r\n                //load a second approach.\r\n                if (missedSegment.waypoints.length > 0) {\r\n                    this.removeSegment(SegmentType.Approach);\r\n                    segment = this.addSegment(SegmentType.Approach);\r\n                    const fromIndex = missedStartIndex - missedSegment.offset - 2;\r\n                    const toIndex = missedStartIndex - missedSegment.offset - 1;\r\n                    if (fromIndex > -1) {\r\n                        segment.waypoints.push(missedSegment.waypoints[fromIndex]);\r\n                    }\r\n                    segment.waypoints.push(missedSegment.waypoints[toIndex]);\r\n                    this.reflowSegments();\r\n                    this.reflowDistances();\r\n                    startIndex = segment.offset + 1;\r\n                    this.activeWaypointIndex = startIndex;\r\n                }\r\n                this.removeSegment(SegmentType.Missed);\r\n                missedSegment = this.addSegment(SegmentType.Missed);\r\n                if (segment === FlightPlanSegment.Empty) {\r\n                    segment = this.addSegment(SegmentType.Approach);\r\n                    startIndex = segment.offset;\r\n                    const prevWaypointIndex = segment.offset - 1;\r\n                    if (prevWaypointIndex > 0) {\r\n                        this.getWaypoint(segment.offset - 1).endsInDiscontinuity = true;\r\n                    }\r\n                }\r\n                const procedure = new LegsProcedure(legs, this.getWaypoint(startIndex - 1), this.getWaypoint(startIndex - 2), this._parentInstrument);\r\n                let waypointIndex = startIndex;\r\n                while (procedure.hasNext()) {\r\n                    const waypoint = yield procedure.getNext();\r\n                    if (waypoint !== undefined) {\r\n                        this.addWaypoint(waypoint, ++waypointIndex, segment.type);\r\n                    }\r\n                }\r\n                let runway;\r\n                if (approachIndex !== -1) {\r\n                    runway = this.getRunway(destinationInfo.oneWayRunways, destinationInfo.approaches[approachIndex].runway);\r\n                }\r\n                else if (destinationRunwayIndex !== -1) {\r\n                    runway = destinationInfo.oneWayRunways[destinationRunwayIndex];\r\n                }\r\n                if (runway) {\r\n                    const selectedRunwayMod = runway.designation.slice(-1);\r\n                    let selectedRunwayOutput = undefined;\r\n                    if (selectedRunwayMod == \"L\" || selectedRunwayMod == \"C\" || selectedRunwayMod == \"R\") {\r\n                        if (runway.designation.length == 2) {\r\n                            selectedRunwayOutput = \"0\" + runway.designation;\r\n                        }\r\n                        else {\r\n                            selectedRunwayOutput = runway.designation;\r\n                        }\r\n                    }\r\n                    else {\r\n                        if (runway.designation.length == 2) {\r\n                            selectedRunwayOutput = runway.designation;\r\n                        }\r\n                        else {\r\n                            selectedRunwayOutput = \"0\" + runway.designation;\r\n                        }\r\n                    }\r\n                    if (approachIndex === -1 && destinationRunwayIndex !== -1 && destinationRunwayExtension !== -1) {\r\n                        const runwayExtensionWaypoint = procedure.buildWaypoint(`RX${selectedRunwayOutput}`, Avionics.Utils.bearingDistanceToCoordinates(runway.direction + 180, destinationRunwayExtension, runway.beginningCoordinates.lat, runway.beginningCoordinates.long));\r\n                        this.addWaypoint(runwayExtensionWaypoint, undefined, SegmentType.Approach);\r\n                    }\r\n                    const runwayWaypoint = procedure.buildWaypoint(`RW${selectedRunwayOutput}`, runway.beginningCoordinates);\r\n                    runwayWaypoint.legAltitudeDescription = 1;\r\n                    runwayWaypoint.legAltitude1 = (runway.elevation * 3.28084) + 50;\r\n                    runwayWaypoint.isRunway = true;\r\n                    this.addWaypoint(runwayWaypoint, undefined, SegmentType.Approach);\r\n                    if (approachIndex !== -1) {\r\n                        missedStartIndex = missedSegment.offset;\r\n                        const missedProcedure = new LegsProcedure(destinationInfo.approaches[approachIndex].missedLegs, this.getWaypoint(missedStartIndex - 1), this.getWaypoint(missedStartIndex - 2), this._parentInstrument);\r\n                        while (missedProcedure.hasNext()) {\r\n                            const waypoint = yield missedProcedure.getNext();\r\n                            if (waypoint !== undefined) {\r\n                                this.addWaypoint(waypoint, ++missedStartIndex, missedSegment.type);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Truncates a flight plan segment. If the active waypoint index is current in the segment,\r\n     * a discontinuity will be added at the end of the active waypoint and the startIndex will\r\n     * point to the next waypoint in the segment after the active.\r\n     * @param type The type of segment to truncate.\r\n     * @returns A segment to add to and a starting waypoint index.\r\n     */\r\n    truncateSegment(type) {\r\n        let segment = this.getSegment(type);\r\n        const startIndex = this.findSegmentByWaypointIndex(this.activeWaypointIndex) === segment\r\n            ? this.activeWaypointIndex + 1\r\n            : segment.offset;\r\n        if (segment !== FlightPlanSegment.Empty) {\r\n            const finalIndex = segment.offset + segment.waypoints.length;\r\n            if (startIndex < finalIndex) {\r\n                for (let i = startIndex; i < finalIndex; i++) {\r\n                    this.removeWaypoint(startIndex);\r\n                }\r\n            }\r\n        }\r\n        if (segment.waypoints.length === 0) {\r\n            this.removeSegment(segment.type);\r\n            segment = FlightPlanSegment.Empty;\r\n        }\r\n        else {\r\n            segment.waypoints[Math.min(Math.max((startIndex - 1) - segment.offset, 0), segment.waypoints.length - 1)].endsInDiscontinuity = true;\r\n        }\r\n        return { startIndex, segment };\r\n    }\r\n    /**\r\n     * Gets the runway information from a given runway name.\r\n     * @param runways The collection of runways to search.\r\n     * @param runwayName The runway name.\r\n     * @returns The found runway, if any.\r\n     */\r\n    getRunway(runways, runwayName) {\r\n        if (runways.length > 0) {\r\n            let runwayIndex;\r\n            runwayName = runwayName.replace('RW', '');\r\n            const runwayLetter = runwayName[runwayName.length - 1];\r\n            if (runwayLetter === ' ' || runwayLetter === 'C') {\r\n                const runwayDirection = runwayName.trim();\r\n                runwayIndex = runways.findIndex(r => r.designation === runwayDirection || r.designation === `${runwayDirection}C`);\r\n            }\r\n            else {\r\n                runwayIndex = runways.findIndex(r => r.designation === runwayName);\r\n            }\r\n            if (runwayIndex !== -1) {\r\n                return runways[runwayIndex];\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Converts a plain object into a ManagedFlightPlan.\r\n     * @param flightPlanObject The object to convert.\r\n     * @param parentInstrument The parent instrument attached to this flight plan.\r\n     * @returns The converted ManagedFlightPlan.\r\n     */\r\n    static fromObject(flightPlanObject, parentInstrument) {\r\n        const plan = Object.assign(new ManagedFlightPlan(), flightPlanObject);\r\n        plan.setParentInstrument(parentInstrument);\r\n        plan.directTo = Object.assign(new DirectTo(), plan.directTo);\r\n        const mapObject = (obj, parentType) => {\r\n            if (obj && obj.infos) {\r\n                obj = Object.assign(new WayPoint(parentInstrument), obj);\r\n            }\r\n            if (obj && obj.coordinates) {\r\n                switch (parentType) {\r\n                    case 'A':\r\n                        obj = Object.assign(new AirportInfo(parentInstrument), obj);\r\n                        break;\r\n                    case 'W':\r\n                        obj = Object.assign(new IntersectionInfo(parentInstrument), obj);\r\n                        break;\r\n                    case 'V':\r\n                        obj = Object.assign(new VORInfo(parentInstrument), obj);\r\n                        break;\r\n                    case 'N':\r\n                        obj = Object.assign(new NDBInfo(parentInstrument), obj);\r\n                        break;\r\n                    default:\r\n                        obj = Object.assign(new WayPointInfo(parentInstrument), obj);\r\n                }\r\n                obj.coordinates = Object.assign(new LatLongAlt(), obj.coordinates);\r\n            }\r\n            return obj;\r\n        };\r\n        const visitObject = (obj) => {\r\n            for (const key in obj) {\r\n                if (typeof obj[key] === 'object' && obj[key] && obj[key].scroll === undefined) {\r\n                    if (Array.isArray(obj[key])) {\r\n                        visitArray(obj[key]);\r\n                    }\r\n                    else {\r\n                        visitObject(obj[key]);\r\n                    }\r\n                    obj[key] = mapObject(obj[key], obj.type);\r\n                }\r\n            }\r\n        };\r\n        const visitArray = (array) => {\r\n            array.forEach((item, index) => {\r\n                if (Array.isArray(item)) {\r\n                    visitArray(item);\r\n                }\r\n                else if (typeof item === 'object') {\r\n                    visitObject(item);\r\n                }\r\n                array[index] = mapObject(item);\r\n            });\r\n        };\r\n        visitObject(plan);\r\n        return plan;\r\n    }\r\n}\r\n//# sourceMappingURL=ManagedFlightPlan.js.map","references":["D:/Documents/GitHub/boufogre/salty-747/src/fpm/src/flightplanning/FlightPlanSegment.ts","D:/Documents/GitHub/boufogre/salty-747/src/fpm/src/flightplanning/LegsProcedure.ts","D:/Documents/GitHub/boufogre/salty-747/src/fpm/src/flightplanning/RawDataMapper.ts","D:/Documents/GitHub/boufogre/salty-747/src/fpm/src/flightplanning/ProcedureDetails.ts","D:/Documents/GitHub/boufogre/salty-747/src/fpm/src/flightplanning/DirectTo.ts","D:/Documents/GitHub/boufogre/salty-747/src/fpm/src/flightplanning/GeoMath.ts"],"map":"{\"version\":3,\"file\":\"ManagedFlightPlan.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/fpm/src/flightplanning/ManagedFlightPlan.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"D:/Documents/GitHub/boufogre/salty-747/src/fpm/dist/types/flightplanning/ManagedFlightPlan.d.ts","writeByteOrderMark":false,"text":"import { SegmentType, FlightPlanSegment } from './FlightPlanSegment';\r\nimport { ProcedureDetails } from './ProcedureDetails';\r\nimport { DirectTo } from './DirectTo';\r\n/**\r\n * A flight plan managed by the FlightPlanManager.\r\n */\r\nexport declare class ManagedFlightPlan {\r\n    /** Whether or not the flight plan has an origin airfield. */\r\n    originAirfield?: WayPoint;\r\n    /** Whether or not the flight plan has a destination airfield. */\r\n    destinationAirfield?: WayPoint;\r\n    /** The cruise altitude for this flight plan. */\r\n    cruiseAltitude: number;\r\n    /** The index of the currently active waypoint. */\r\n    activeWaypointIndex: number;\r\n    /** The details for selected procedures on this flight plan. */\r\n    procedureDetails: ProcedureDetails;\r\n    /** The details of any direct-to procedures on this flight plan. */\r\n    directTo: DirectTo;\r\n    /** The departure segment of the flight plan. */\r\n    get departure(): FlightPlanSegment;\r\n    /** The enroute segment of the flight plan. */\r\n    get enroute(): FlightPlanSegment;\r\n    /** The arrival segment of the flight plan. */\r\n    get arrival(): FlightPlanSegment;\r\n    /** The approach segment of the flight plan. */\r\n    get approach(): FlightPlanSegment;\r\n    /** The approach segment of the flight plan. */\r\n    get missed(): FlightPlanSegment;\r\n    /** Whether the flight plan has an origin airfield. */\r\n    get hasOrigin(): WayPoint;\r\n    /** Whether the flight plan has a destination airfield. */\r\n    get hasDestination(): WayPoint;\r\n    /** The currently active waypoint. */\r\n    get activeWaypoint(): WayPoint;\r\n    /** The parent instrument this flight plan is attached to locally. */\r\n    private _parentInstrument?;\r\n    /** The current active segments of the flight plan. */\r\n    private _segments;\r\n    /** The waypoints of the flight plan. */\r\n    get waypoints(): WayPoint[];\r\n    /** The length of the flight plan. */\r\n    get length(): number;\r\n    get checksum(): number;\r\n    /** The non-approach waypoints of the flight plan. */\r\n    get nonApproachWaypoints(): WayPoint[];\r\n    /**\r\n     * Sets the parent instrument that the flight plan is attached to locally.\r\n     * @param instrument The instrument that the flight plan is attached to.\r\n     */\r\n    setParentInstrument(instrument: BaseInstrument): void;\r\n    /**\r\n     * Clears the flight plan.\r\n     */\r\n    clearPlan(): Promise<void>;\r\n    /**\r\n     * Syncs the flight plan to FS9GPS.\r\n     */\r\n    syncToGPS(): Promise<void>;\r\n    /**\r\n     * Adds a waypoint to the flight plan.\r\n     * @param waypoint The waypoint to add.\r\n     * @param index The index to add the waypoint at. If ommitted the waypoint will\r\n     * be appended to the end of the flight plan.\r\n     * @param segmentType The type of segment to add the waypoint to.\r\n     */\r\n    addWaypoint(waypoint: WayPoint, index?: number | undefined, segmentType?: SegmentType): void;\r\n    /**\r\n     * Removes a waypoint from the flight plan.\r\n     * @param index The index of the waypoint to remove.\r\n     */\r\n    removeWaypoint(index: number): void;\r\n    /**\r\n     * Gets a waypoint by index from the flight plan.\r\n     * @param index The index of the waypoint to get.\r\n     */\r\n    getWaypoint(index: number): WayPoint;\r\n    /**\r\n     * Adds a plan segment to the flight plan.\r\n     * @param type The type of the segment to add.\r\n     */\r\n    addSegment(type: SegmentType): FlightPlanSegment;\r\n    /**\r\n     * Removes a plan segment from the flight plan.\r\n     * @param type The type of plan segment to remove.\r\n     */\r\n    removeSegment(type: SegmentType): void;\r\n    /**\r\n     * Reflows waypoint index offsets accross plans segments.\r\n     */\r\n    reflowSegments(): void;\r\n    /**\r\n     * Gets a flight plan segment of the specified type.\r\n     * @param type The type of flight plan segment to get.\r\n     * @returns The found segment, or FlightPlanSegment.Empty if not found.\r\n     */\r\n    getSegment(type: number): FlightPlanSegment;\r\n    /**\r\n     * Finds a flight plan segment by waypoint index.\r\n     * @param index The index of the waypoint to find the segment for.\r\n     * @returns The located segment, if any.\r\n     */\r\n    findSegmentByWaypointIndex(index: number): FlightPlanSegment;\r\n    /**\r\n     * Recalculates all waypoint bearings and distances in the flight plan.\r\n     */\r\n    reflowDistances(): void;\r\n    /**\r\n     * Copies a sanitized version of the flight plan for shared data storage.\r\n     * @returns The sanitized flight plan.\r\n     */\r\n    serialize(): any;\r\n    /**\r\n     * Copies the flight plan.\r\n     * @returns The copied flight plan.\r\n     */\r\n    copy(): ManagedFlightPlan;\r\n    /**\r\n     * Reverses the flight plan.\r\n     */\r\n    reverse(): void;\r\n    /**\r\n     * Goes direct to the specified waypoint index in the flight plan.\r\n     * @param index The waypoint index to go direct to.\r\n     */\r\n    addDirectTo(index: number): void;\r\n    /**\r\n     * Calculates an intercept path to a direct-to waypoint.\r\n     * @param waypoint The waypoint to calculate the path to.\r\n     * @returns The waypoints that make up the intercept path.\r\n     */\r\n    calculateDirectIntercept(waypoint: WayPoint): WayPoint[];\r\n    /**\r\n     * Builds a departure into the flight plan from indexes in the departure airport information.\r\n     */\r\n    buildDeparture(): Promise<void>;\r\n    /**\r\n     * Builds an arrival into the flight plan from indexes in the arrival airport information.\r\n     */\r\n    buildArrival(): Promise<void>;\r\n    /**\r\n     * Builds an approach into the flight plan from indexes in the arrival airport information.\r\n     */\r\n    buildApproach(): Promise<void>;\r\n    /**\r\n     * Truncates a flight plan segment. If the active waypoint index is current in the segment,\r\n     * a discontinuity will be added at the end of the active waypoint and the startIndex will\r\n     * point to the next waypoint in the segment after the active.\r\n     * @param type The type of segment to truncate.\r\n     * @returns A segment to add to and a starting waypoint index.\r\n     */\r\n    truncateSegment(type: SegmentType): {\r\n        startIndex: number;\r\n        segment: FlightPlanSegment;\r\n    };\r\n    /**\r\n     * Gets the runway information from a given runway name.\r\n     * @param runways The collection of runways to search.\r\n     * @param runwayName The runway name.\r\n     * @returns The found runway, if any.\r\n     */\r\n    getRunway(runways: OneWayRunway[], runwayName: string): OneWayRunway;\r\n    /**\r\n     * Converts a plain object into a ManagedFlightPlan.\r\n     * @param flightPlanObject The object to convert.\r\n     * @param parentInstrument The parent instrument attached to this flight plan.\r\n     * @returns The converted ManagedFlightPlan.\r\n     */\r\n    static fromObject(flightPlanObject: any, parentInstrument: BaseInstrument): ManagedFlightPlan;\r\n}\r\n"}}
