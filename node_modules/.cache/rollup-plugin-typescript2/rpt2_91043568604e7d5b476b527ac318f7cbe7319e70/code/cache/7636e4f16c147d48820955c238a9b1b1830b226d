{"code":"/**\r\n * A class for mapping raw facility data to WayPoints.\r\n */\r\nexport class RawDataMapper {\r\n    /**\r\n     * Maps a raw facility record to a WayPoint.\r\n     * @param facility The facility record to map.\r\n     * @param instrument The instrument to attach to the WayPoint.\r\n     * @returns The mapped waypoint.\r\n     */\r\n    static toWaypoint(facility, instrument) {\r\n        const waypoint = new WayPoint(instrument);\r\n        waypoint.ident = facility.icao.substring(7, 12).trim();\r\n        waypoint.icao = facility.icao;\r\n        waypoint.type = facility.icao[0];\r\n        switch (waypoint.type) {\r\n            case 'A':\r\n                {\r\n                    const info = new AirportInfo(instrument);\r\n                    info.CopyBaseInfosFrom(waypoint);\r\n                    info.UpdateNamedFrequencies();\r\n                    info.approaches = facility.approaches;\r\n                    info.approaches.forEach(approach => approach.transitions.forEach(trans => trans.name = trans.legs[0].fixIcao.substring(7, 12).trim()));\r\n                    info.departures = facility.departures;\r\n                    info.departures.forEach(departure => departure.runwayTransitions.forEach(trans => trans.name = RawDataMapper.generateRunwayTransitionName(trans)));\r\n                    info.departures.forEach(departure => departure.enRouteTransitions.forEach(trans => trans.name = RawDataMapper.generateDepartureEnRouteTransitionName(trans)));\r\n                    info.arrivals = facility.arrivals;\r\n                    info.arrivals.forEach(arrival => arrival.runwayTransitions.forEach(trans => trans.name = RawDataMapper.generateRunwayTransitionName(trans)));\r\n                    info.arrivals.forEach(arrival => arrival.enRouteTransitions.forEach(trans => trans.name = RawDataMapper.generateArrivalTransitionName(trans)));\r\n                    info.runways = facility.runways;\r\n                    info.oneWayRunways = [];\r\n                    facility.runways.forEach(runway => info.oneWayRunways.push(...Object.assign(new Runway(), runway).splitIfTwoWays()));\r\n                    info.oneWayRunways.sort(RawDataMapper.sortRunways);\r\n                    waypoint.infos = info;\r\n                }\r\n                break;\r\n            case 'V':\r\n                waypoint.infos = new VORInfo(instrument);\r\n                break;\r\n            case 'N':\r\n                waypoint.infos = new NDBInfo(instrument);\r\n                break;\r\n            case 'W':\r\n                waypoint.infos = new IntersectionInfo(instrument);\r\n                break;\r\n            default:\r\n                waypoint.infos = new WayPointInfo(instrument);\r\n                break;\r\n        }\r\n        if (waypoint.type !== 'A') {\r\n            waypoint.infos.CopyBaseInfosFrom(waypoint);\r\n            waypoint.infos.routes = facility.routes;\r\n        }\r\n        waypoint.infos.coordinates = new LatLongAlt(facility.lat, facility.lon);\r\n        return waypoint;\r\n    }\r\n    /**\r\n     * A comparer for sorting runways by number, and then by L, C, and R.\r\n     * @param r1 The first runway to compare.\r\n     * @param r2 The second runway to compare.\r\n     * @returns -1 if the first is before, 0 if equal, 1 if the first is after.\r\n     */\r\n    static sortRunways(r1, r2) {\r\n        if (parseInt(r1.designation) === parseInt(r2.designation)) {\r\n            let v1 = 0;\r\n            if (r1.designation.indexOf(\"L\") != -1) {\r\n                v1 = 1;\r\n            }\r\n            else if (r1.designation.indexOf(\"C\") != -1) {\r\n                v1 = 2;\r\n            }\r\n            else if (r1.designation.indexOf(\"R\") != -1) {\r\n                v1 = 3;\r\n            }\r\n            let v2 = 0;\r\n            if (r2.designation.indexOf(\"L\") != -1) {\r\n                v2 = 1;\r\n            }\r\n            else if (r2.designation.indexOf(\"C\") != -1) {\r\n                v2 = 2;\r\n            }\r\n            else if (r2.designation.indexOf(\"R\") != -1) {\r\n                v2 = 3;\r\n            }\r\n            return v1 - v2;\r\n        }\r\n        return parseInt(r1.designation) - parseInt(r2.designation);\r\n    }\r\n    /**\r\n     * Generates a runway transition name from the designated runway in the transition data.\r\n     * @param runwayTransition The runway transition to generate the name for.\r\n     * @returns The runway transition name.\r\n     */\r\n    static generateRunwayTransitionName(runwayTransition) {\r\n        let name = `RW${runwayTransition.runwayNumber}`;\r\n        switch (runwayTransition.runwayDesignation) {\r\n            case 1:\r\n                name += \"L\";\r\n                break;\r\n            case 2:\r\n                name += \"R\";\r\n                break;\r\n            case 3:\r\n                name += \"C\";\r\n                break;\r\n        }\r\n        return name;\r\n    }\r\n    /**\r\n     * Generates an arrival transition name from a provided arrival enroute transition.\r\n     * @param enrouteTransition The enroute transition to generate a name for.\r\n     * @returns The generated transition name.\r\n     */\r\n    static generateArrivalTransitionName(enrouteTransition) {\r\n        return enrouteTransition.legs[0].fixIcao.substring(7, 12).trim();\r\n    }\r\n    /**\r\n     * Generates a departure transition name from a provided departure enroute transition.\r\n     * @param enrouteTransition The enroute transition to generate a name for.\r\n     * @returns The generated transition name.\r\n     */\r\n    static generateDepartureEnRouteTransitionName(enrouteTransition) {\r\n        return enrouteTransition.legs[enrouteTransition.legs.length - 1].fixIcao.substring(7, 12).trim();\r\n    }\r\n}\r\n//# sourceMappingURL=RawDataMapper.js.map","references":[],"map":"{\"version\":3,\"file\":\"RawDataMapper.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/fpm/src/flightplanning/RawDataMapper.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"D:/Documents/GitHub/boufogre/salty-747/src/fpm/dist/types/flightplanning/RawDataMapper.d.ts","writeByteOrderMark":false,"text":"/**\r\n * A class for mapping raw facility data to WayPoints.\r\n */\r\nexport declare class RawDataMapper {\r\n    /**\r\n     * Maps a raw facility record to a WayPoint.\r\n     * @param facility The facility record to map.\r\n     * @param instrument The instrument to attach to the WayPoint.\r\n     * @returns The mapped waypoint.\r\n     */\r\n    static toWaypoint(facility: any, instrument: BaseInstrument): WayPoint;\r\n    /**\r\n     * A comparer for sorting runways by number, and then by L, C, and R.\r\n     * @param r1 The first runway to compare.\r\n     * @param r2 The second runway to compare.\r\n     * @returns -1 if the first is before, 0 if equal, 1 if the first is after.\r\n     */\r\n    static sortRunways(r1: OneWayRunway, r2: OneWayRunway): number;\r\n    /**\r\n     * Generates a runway transition name from the designated runway in the transition data.\r\n     * @param runwayTransition The runway transition to generate the name for.\r\n     * @returns The runway transition name.\r\n     */\r\n    static generateRunwayTransitionName(runwayTransition: RunwayTransition): string;\r\n    /**\r\n     * Generates an arrival transition name from a provided arrival enroute transition.\r\n     * @param enrouteTransition The enroute transition to generate a name for.\r\n     * @returns The generated transition name.\r\n     */\r\n    static generateArrivalTransitionName(enrouteTransition: EnrouteTransition): string;\r\n    /**\r\n     * Generates a departure transition name from a provided departure enroute transition.\r\n     * @param enrouteTransition The enroute transition to generate a name for.\r\n     * @returns The generated transition name.\r\n     */\r\n    static generateDepartureEnRouteTransitionName(enrouteTransition: EnrouteTransition): string;\r\n}\r\n"}}
